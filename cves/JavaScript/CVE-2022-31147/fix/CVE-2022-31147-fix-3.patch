
diff --git a/src/core.js b/src/core.js
index 088be16..c1a1fbc 100644
--- a/src/core.js
+++ b/src/core.js
@@ -1031,13 +1031,12 @@ $.extend( $.validator, {
 		// See https://api.jquery.com/category/selectors/, for CSS
 		// meta-characters that should be escaped in order to be used with JQuery
 		// as a literal part of a name/id or any selector.
-		escapeCssMeta: function( string ) {
-			if ( string === undefined ) {
-				return "";
-			}
-
-			return string.replace( /([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1" );
-		},
+        escapeCssMeta: function( string ) {
+            if (string === undefined || string.length > 100) {
+                return "";
+            }
+            return string.replace( /([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1" );
+        },
 
 		idOrName: function( element ) {
 			return this.groups[ element.name ] || ( this.checkable( element ) ? element.name : element.id || element.name );
diff --git a/test_escapeCssMeta.js b/test_escapeCssMeta.js
new file mode 100644
index 0000000..528d809
--- /dev/null
+++ b/test_escapeCssMeta.js
@@ -0,0 +1,13 @@
+// Importing the necessary module from core.js
+const { escapeCssMeta } = require('./src/core.js');
+
+// Test cases for escapeCssMeta function
+console.log("Test 1: Normal input");
+console.log(escapeCssMeta("name#id"));  // Expected to escape special characters
+
+console.log("Test 2: Input exceeding 100 characters");
+console.log(escapeCssMeta("a".repeat(101)));  // Expected to return empty string due to length limit
+
+console.log("Test 3: Special characters input");
+console.log(escapeCssMeta("#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"));  // Expected to escape all special characters
+
