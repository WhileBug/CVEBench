
diff --git a/src/node/utils/Minify.js b/src/node/utils/Minify.js
index ba45ab75..35d728ab 100644
--- a/src/node/utils/Minify.js
+++ b/src/node/utils/Minify.js
@@ -142,6 +142,11 @@ function minify(req, res, next)
   var filename = req.params['filename'];
 
   // No relative paths, especially if they may go up the file hierarchy.
+  if (/(\.\.\/|\/\.\.)/.test(req.params['filename'])) {
+    res.writeHead(400, {"Content-Type": "text/plain"});
+    res.end("Invalid file path.");
+    return;
+  }
   filename = path.normalize(path.join(ROOT_DIR, filename));
   if (filename.indexOf(ROOT_DIR) == 0) {
     filename = filename.slice(ROOT_DIR.length);
diff --git a/test_minify.js b/test_minify.js
new file mode 100644
index 00000000..e019b073
--- /dev/null
+++ b/test_minify.js
@@ -0,0 +1,25 @@
+const minify = require('./src/node/utils/Minify.js').minify;
+const httpMocks = require('node-mocks-http');
+
+function testMinify() {
+    const requests = [
+        {filename: 'validfile.js'}, // Valid request
+        {filename: '../malicious.js'}, // Malicious request attempting directory traversal
+        {filename: '/etc/passwd'} // Another type of malicious request
+    ];
+
+    requests.forEach(req => {
+        let request = httpMocks.createRequest({
+            method: 'GET',
+            url: '/minify',
+            params: req
+        });
+        let response = httpMocks.createResponse();
+
+        minify(request, response, () => {
+            console.log(`Response for ${req.filename}: Status - ${response.statusCode}`);
+        });
+    });
+}
+
+testMinify();
