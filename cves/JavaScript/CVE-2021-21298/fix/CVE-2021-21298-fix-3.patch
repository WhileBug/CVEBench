
diff --git a/packages/node_modules/@node-red/runtime/lib/storage/localfilesystem/projects/Project.js b/packages/node_modules/@node-red/runtime/lib/storage/localfilesystem/projects/Project.js
index 0fbf89de4..a84481b75 100644
--- a/packages/node_modules/@node-red/runtime/lib/storage/localfilesystem/projects/Project.js
+++ b/packages/node_modules/@node-red/runtime/lib/storage/localfilesystem/projects/Project.js
@@ -15,7 +15,13 @@
  **/
 
 
-var fs = require('fs-extra');
+var sanitizePath = function(basePath, userPath) {
+    var normalizedPath = fspath.normalize(fspath.join(basePath, userPath));
+    if (!normalizedPath.startsWith(fspath.resolve(basePath))) {
+        throw new Error('Access denied: path traversal detected');
+    }
+    return normalizedPath;
+};
 var when = require('when');
 var fspath = require("path");
 var os = require('os');
@@ -72,26 +78,39 @@ function Project(path) {
 Project.prototype.load = function () {
     var project = this;
     var globalProjectSettings = settings.get("projects");
-// console.log(globalProjectSettings)
     var projectSettings = {};
     if (globalProjectSettings) {
         if (globalProjectSettings.projects.hasOwnProperty(this.name)) {
             projectSettings = globalProjectSettings.projects[this.name] || {};
         }
     }
-    this.paths.root = projectSettings.rootPath || "";
+    this.paths.root = sanitizePath(this.path, projectSettings.rootPath || "");
     this.credentialSecret = projectSettings.credentialSecret;
     this.git = projectSettings.git || { user:{} };
 
-    // this.paths.flowFile = fspath.join(this.path,"flow.json");
-    // this.paths.credentialsFile = fspath.join(this.path,"flow_cred.json");
-
     var promises = [];
     return checkProjectFiles(project).then(function(missingFiles) {
         project.missingFiles = missingFiles;
         if (missingFiles.indexOf('package.json') === -1) {
             // We have a package.json in project.path+project.paths.root+"package.json"
-            project.paths['package.json'] = fspath.join(project.paths.root,"package.json");
+            project.paths['package.json'] = sanitizePath(project.path, fspath.join(project.paths.root,"package.json"));
+            promises.push(fs.readFile(project.paths['package.json'],"utf8").then(function(content) {
+                try {
+                    project.package = util.parseJSON(content);
+                    if (project.package.hasOwnProperty('node-red')) {
+                        if (project.package['node-red'].hasOwnProperty('settings')) {
+                            project.paths.flowFile = sanitizePath(project.path, fspath.join(project.paths.root,project.package['node-red'].settings.flowFile));
+                            project.paths.credentialsFile = sanitizePath(project.path, fspath.join(project.paths.root,project.package['node-red'].settings.credentialsFile));
+                        }
+                    }
+                } catch(err) {
+                    log.warn("Error parsing project package.json: "+err.toString());
+                }
+            }));
+        }
+        return when.all(promises);
+    });
+};
             promises.push(fs.readFile(fspath.join(project.path,project.paths['package.json']),"utf8").then(function(content) {
                 try {
                     project.package = util.parseJSON(content);
@@ -486,9 +505,10 @@ Project.prototype.getCommit = function(sha) {
     return gitTools.getCommit(this.path,sha);
 }
 
-Project.prototype.getFile = function (filePath,treeish) {
-    if (treeish !== "_") {
-        return gitTools.getFile(this.path, filePath, treeish);
+Project.prototype.getFile = function (filePath, treeish) {
+    var sanitizedPath = sanitizePath(this.path, filePath);
+    return gitTools.getFile(this.path, sanitizedPath, treeish);
+};
     } else {
         return fs.readFile(fspath.join(this.path,filePath),"utf8");
     }
