import subprocess
import json

# Simulate the exploit logic similar to the CVE in the JavaScript environment
def exploit():
    # This is a placeholder for the actual exploit code which would typically involve
    # manipulating the extend() function in a way that exposes the vulnerability
    # For demonstration, let's assume we're trying to overwrite properties in a way that shouldn't be allowed
    payload = '{"test": "overwrite"}'
    base = '{"test": "safe"}'
    
    # Simulating a call to a vulnerable JavaScript function using subprocess to run node
    # Assume 'exploit.js' contains the vulnerable extend() function logic
    exploit_code = 'const base = JSON.parse(process.argv[1]);' \
                   'const payload = JSON.parse(process.argv[2]);' \
                   'const extend = require("./src/utils/utils").extend;' \
                   'console.log(JSON.stringify(extend(base, payload)));'
    
    result = subprocess.run(['node', '-e', exploit_code, base, payload], capture_output=True, text=True)
    output = json.loads(result.stdout)
    
    # Check if the exploit was successful
    if output['test'] == 'overwrite':
        print('The ACI exploit success!!!')
    else:
        print('The ACI exploit failed!!!')

if __name__ == "__main__":
    exploit()
