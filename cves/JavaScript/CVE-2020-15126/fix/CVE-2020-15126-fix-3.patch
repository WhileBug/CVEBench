
diff --git a/src/GraphQL/loaders/usersQueries.js b/src/GraphQL/loaders/usersQueries.js
index 6a1d3ea9..b8c95243 100644
--- a/src/GraphQL/loaders/usersQueries.js
+++ b/src/GraphQL/loaders/usersQueries.js
@@ -49,6 +49,22 @@ const getUserFromSessionToken = async (
       .join(',');
   }
 
+  // Validate session token against user sessions
+  const userSession = await rest.find(
+    config,
+    Auth.master(config),
+    '_User',
+    { sessionToken: sessionToken },
+    { limit: 1 }
+  );
+
+  if (!userSession || userSession.results.length === 0) {
+    throw new Parse.Error(
+      Parse.Error.INVALID_SESSION_TOKEN,
+      'No active session found for this token'
+    );
+  }
+
   const response = await rest.find(
     config,
     Auth.master(config),
@@ -75,29 +91,6 @@ const getUserFromSessionToken = async (
     };
   }
 };
-
-const load = parseGraphQLSchema => {
-  if (parseGraphQLSchema.isUsersClassDisabled) {
-    return;
-  }
-
-  parseGraphQLSchema.addGraphQLQuery(
-    'viewer',
-    {
-      description:
-        'The viewer query can be used to return the current user data.',
-      type: new GraphQLNonNull(parseGraphQLSchema.viewerType),
-      async resolve(_source, _args, context, queryInfo) {
-        try {
-          const { config, info } = context;
-          return await getUserFromSessionToken(
-            config,
-            info,
-            queryInfo,
-            'user.',
-            false
-          );
-        } catch (e) {
           parseGraphQLSchema.handleError(e);
         }
       },
