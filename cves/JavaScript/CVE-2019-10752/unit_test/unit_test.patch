
diff --git a/ACI_unit_test.py b/ACI_unit_test.py
new file mode 100644
index 000000000..8052677e1
--- /dev/null
+++ b/ACI_unit_test.py
@@ -0,0 +1,32 @@
+import json
+from sqlalchemy import create_engine, text
+
+# Setup the database connection
+engine = create_engine('sqlite:///test.db')
+# Create the database and users table if not exists
+with engine.connect() as connection:
+    connection.execute(text("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, data TEXT)"))
+# Vulnerable JSON query function simulation
+def vulnerable_json_query(table, key, value):
+    # This is a simulated vulnerable function that does not properly escape JSON keys or values
+    query = f"SELECT * FROM {table} WHERE {key} = '{json.dumps(value)}'"
+    return query
+
+# Exploit attempt
+def exploit():
+    try:
+        # Malicious input that attempts SQL injection
+        malicious_input = "1' OR '1'='1"
+        result_query = vulnerable_json_query('users', 'data', malicious_input)
+        result = engine.connect().execute(text(result_query)).fetchall()
+        
+        if result:
+            print('The ACI exploit success!!!')
+        else:
+            print('The ACI exploit failed!!!')
+    except Exception as e:
+        print('The ACI exploit failed!!!')
+        print(str(e))
+
+# Run the exploit
+exploit()
diff --git a/ACI_unit_test.sh b/ACI_unit_test.sh
new file mode 100644
index 000000000..8c1d26242
--- /dev/null
+++ b/ACI_unit_test.sh
@@ -0,0 +1,9 @@
+#!/bin/bash
+
+# Setup the environment
+echo "Setting up the environment..."
+pip install sqlalchemy
+
+# Run the exploit test script
+echo "Running the exploit test script..."
+python ACI_unit_test.py
diff --git a/test.db b/test.db
new file mode 100644
index 000000000..5c8cccd6a
Binary files /dev/null and b/test.db differ
