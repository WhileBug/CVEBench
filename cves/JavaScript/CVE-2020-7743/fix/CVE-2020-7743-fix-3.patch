
diff --git a/src/utils/object.js b/src/utils/object.js
index 46cf4b3c7..6f85bd98f 100644
--- a/src/utils/object.js
+++ b/src/utils/object.js
@@ -80,24 +80,29 @@ export function extend (a, b) {
  * @returns {Object}
  */
 export function deepExtend (a, b) {
-  // TODO: add support for Arrays to deepExtend
-  if (Array.isArray(b)) {
-    throw new TypeError('Arrays are not supported by deepExtend')
-  }
+    // TODO: add support for Arrays to deepExtend
+    if (Array.isArray(b)) {
+        throw new TypeError('Arrays are not supported by deepExtend')
+    }
 
-  for (const prop in b) {
-    if (hasOwnProperty(b, prop)) {
-      if (b[prop] && b[prop].constructor === Object) {
-        if (a[prop] === undefined) {
-          a[prop] = {}
+    for (const prop in b) {
+        if (hasOwnProperty(b, prop) && !isPrototypePollutingKey(prop)) {
+            if (b[prop] && b[prop].constructor === Object) {
+                if (a[prop] === undefined) {
+                    a[prop] = {}
+                }
+                if (a[prop] && a[prop].constructor === Object) {
+                    deepExtend(a[prop], b[prop])
+                } else {
+                    a[prop] = b[prop]
+                }
+            } else if (Array.isArray(b[prop])) {
+                throw new TypeError('Arrays are not supported by deepExtend')
+            }
         }
-        if (a[prop] && a[prop].constructor === Object) {
-          deepExtend(a[prop], b[prop])
-        } else {
-          a[prop] = b[prop]
-        }
-      } else if (Array.isArray(b[prop])) {
-        throw new TypeError('Arrays are not supported by deepExtend')
+    }
+    return a
+}
       } else {
         a[prop] = b[prop]
       }
@@ -392,4 +397,6 @@ export function values (object) {
 // helper function to test whether a string contains a path like 'user.name'
 function isPath (str) {
   return str.indexOf('.') !== -1
+function isPrototypePollutingKey(key) {
+    return ['__proto__', 'constructor', 'prototype'].includes(key);
 }
diff --git a/test_prototype_pollution.js b/test_prototype_pollution.js
new file mode 100644
index 000000000..91e17c7a1
--- /dev/null
+++ b/test_prototype_pollution.js
@@ -0,0 +1,12 @@
+import { deepExtend } from './src/utils/object.js';
+
+const payload = JSON.parse('{"__proto__": {"polluted": "Yes"}}');
+const target = {};
+
+deepExtend(target, payload);
+
+if (Object.prototype.polluted) {
+    console.log('Prototype pollution detected:', Object.prototype.polluted);
+} else {
+    console.log('No prototype pollution detected.');
+}
