
diff --git a/src/Routers/PublicAPIRouter.js b/src/Routers/PublicAPIRouter.js
index f30c5289..76cdec5e 100644
--- a/src/Routers/PublicAPIRouter.js
+++ b/src/Routers/PublicAPIRouter.js
@@ -15,6 +15,14 @@ export class PublicAPIRouter extends PromiseRouter {
     const appId = req.params.appId;
     const config = Config.get(appId);
 
+    // Input validation
+    if (typeof username !== 'string' || typeof token !== 'string') {
+      return this.invalidRequest();
+    }
+    if (!username.trim() || !token.trim()) {
+      return this.invalidRequest();
+    }
+
     if (!config) {
       this.invalidRequest();
     }
@@ -41,6 +49,7 @@ export class PublicAPIRouter extends PromiseRouter {
       }
     );
   }
+  }
 
   resendVerificationEmail(req) {
     const username = req.body.username;
@@ -124,6 +133,14 @@ export class PublicAPIRouter extends PromiseRouter {
 
     const { username, token } = req.query;
 
+    // Input validation
+    if (typeof username !== 'string' || typeof token !== 'string') {
+      return this.invalidRequest();
+    }
+    if (!username.trim() || !token.trim()) {
+      return this.invalidRequest();
+    }
+
     if (!username || !token) {
       return this.invalidLink(req);
     }
@@ -146,6 +163,7 @@ export class PublicAPIRouter extends PromiseRouter {
       }
     );
   }
+  }
 
   resetPassword(req) {
     const config = req.config;
@@ -160,24 +178,34 @@ export class PublicAPIRouter extends PromiseRouter {
 
     const { username, token, new_password } = req.body;
 
-    if ((!username || !token || !new_password) && req.xhr === false) {
-      return this.invalidLink(req);
+    // Input validation
+    if (typeof username !== 'string' || typeof token !== 'string' || typeof new_password !== 'string') {
+      return this.invalidRequest();
     }
-
-    if (!username) {
-      throw new Parse.Error(Parse.Error.USERNAME_MISSING, 'Missing username');
+    if (!username.trim() || !token.trim() || !new_password.trim()) {
+      return this.invalidRequest();
     }
 
-    if (!token) {
-      throw new Parse.Error(Parse.Error.OTHER_CAUSE, 'Missing token');
-    }
-
-    if (!new_password) {
-      throw new Parse.Error(Parse.Error.PASSWORD_MISSING, 'Missing password');
+    if (!username || !token || !new_password) {
+      return this.invalidLink(req);
     }
 
     return config.userController
       .updatePassword(username, token, new_password)
+      .then(
+        () => {
+          return Promise.resolve({
+            success: true,
+          });
+        },
+        err => {
+          return Promise.resolve({
+            success: false,
+            error: err,
+          });
+        }
+      );
+  }
       .then(
         () => {
           return Promise.resolve({
