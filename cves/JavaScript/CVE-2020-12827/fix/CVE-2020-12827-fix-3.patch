
diff --git a/packages/mjml-parser-xml/src/index.js b/packages/mjml-parser-xml/src/index.js
index f755ffd9..adbd01c2 100644
--- a/packages/mjml-parser-xml/src/index.js
+++ b/packages/mjml-parser-xml/src/index.js
@@ -65,36 +65,42 @@ export default function MJMLParser(xml, options = {}, includedIn = []) {
   const findTag = (tagName, tree) => find(tree.children, { tagName })
   const lineIndexes = indexesForNewLine(xml)
 
-  const handleInclude = (file, line) => {
+const handleInclude = (file, line) => {
     const partialPath = path.resolve(cwd, file)
+
+    // Prevent directory traversal attack by sanitizing the input path
+    if (!partialPath.startsWith(cwd)) {
+        throw new Error(`Invalid include path: ${partialPath}`);
+    }
+
     const curBeforeInclude = cur
 
     if (find(cur.includedIn, { file: partialPath }))
-      throw new Error(`Circular inclusion detected on file : ${partialPath}`)
+        throw new Error(`Circular inclusion detected on file : ${partialPath}`)
 
     let content
 
     try {
-      content = fs.readFileSync(partialPath, 'utf8')
+        content = fs.readFileSync(partialPath, 'utf8')
     } catch (e) {
-      const newNode = {
-        line,
-        file,
-        absoluteFilePath: path.resolve(cwd, actualPath),
-        parent: cur,
-        tagName: 'mj-raw',
-        content: `<!-- mj-include fails to read file : ${file} at ${partialPath} -->`,
-        children: [],
-        errors: [
-          {
-            type: 'include',
-            params: { file, partialPath },
-          },
-        ],
-      }
-      cur.children.push(newNode)
+        const newNode = {
+            line,
+            file,
+            absoluteFilePath: path.resolve(cwd, actualPath),
+            parent: cur,
+            tagName: 'mj-raw',
+            content: `<!-- mj-include fails to read file : ${file} at ${partialPath} -->`,
+            children: [],
+            errors: [
+                {
+                    type: 'include',
+                    params: { file, partialPath },
+                },
+            ],
+        }
+        cur.children.push(newNode)
 
-      return
+        return
     }
 
     content =
