
diff --git a/lib/util/extract.js b/lib/util/extract.js
index 7ba285c1..191f2bc0 100644
--- a/lib/util/extract.js
+++ b/lib/util/extract.js
@@ -130,8 +130,10 @@ function extractGz(archive, dst) {
     return deferred.promise;
 }
 
-function isSymlink(entry) {
-    return entry.type === 'SymbolicLink';
+function isSymlink(entry, dst) {
+    var targetPath = path.resolve(dst, entry.path);
+    var isOutside = !targetPath.startsWith(dst);
+    return entry.type === 'SymbolicLink' && !isOutside;
 }
 
 function filterSymlinks(entry) {
diff --git a/test_symlink_protection.js b/test_symlink_protection.js
new file mode 100644
index 00000000..99480c61
--- /dev/null
+++ b/test_symlink_protection.js
@@ -0,0 +1,21 @@
+const extract = require('./lib/util/extract');
+const path = require('path');
+const fs = require('fs');
+
+// Mock function to simulate the extraction process
+function mockExtract(tarFilePath, dstPath, options) {
+  // Simulate checking for symlinks
+  const entry = { type: 'SymbolicLink', path: '../outside' };
+  if (extract.isSymlink(entry, dstPath)) {
+    console.log('Blocked a symlink pointing outside the intended directory.');
+  } else {
+    console.log('Failed to block a dangerous symlink.');
+  }
+}
+
+// Create a tar file with a symlink pointing outside the intended directory
+const tarFilePath = path.join(__dirname, 'malicious.tar');
+const dstPath = path.join(__dirname, 'extracted');
+
+// Call the mock extract function
+mockExtract(tarFilePath, dstPath, {});
