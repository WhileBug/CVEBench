
diff --git a/lib/expression/parse.js b/lib/expression/parse.js
index aef74f96e..9e3f6e2f4 100644
--- a/lib/expression/parse.js
+++ b/lib/expression/parse.js
@@ -578,7 +578,10 @@ function factory (type, config, load, typed) {
 
     var node = parseConditional();
 
-    if (token == '=') {
+      // Security enhancement: Prevent execution of potentially harmful JavaScript functions
+      if (/[\s\S]*\b(eval|Function|exec|spawn)\b[\s\S]*/.test(expression)) {
+        throw new Error('Security Error: Potentially harmful function usage detected.');
+      }
       if (type.isSymbolNode(node)) {
         // parse a variable assignment like 'a = 2/3'
         name = node.name;
diff --git a/test/expression/parse.test.js b/test/expression/parse.test.js
index 8a2a65454..be0408278 100644
--- a/test/expression/parse.test.js
+++ b/test/expression/parse.test.js
@@ -97,7 +97,20 @@ describe('parse', function() {
 
   });
 
-  describe('multiline', function () {
+  it('should prevent execution of potentially harmful JavaScript functions', function() {
+    assert.throws(function () {
+      parseAndEval('eval("console.log(\'Hello World\')")');
+    }, /Security Error: Potentially harmful function usage detected./);
+    assert.throws(function () {
+      parseAndEval('Function("return console.log(\'Hello World\')")()');
+    }, /Security Error: Potentially harmful function usage detected./);
+    assert.throws(function () {
+      parseAndEval('exec("rm -rf /")');
+    }, /Security Error: Potentially harmful function usage detected./);
+    assert.throws(function () {
+      parseAndEval('spawn("ls")');
+    }, /Security Error: Potentially harmful function usage detected./);
+  });
 
     it('should parse multiline expressions', function() {
       assert.deepEqual(parse('a=3\nb=4\na*b').compile().eval(), new ResultSet([3, 4, 12]));
