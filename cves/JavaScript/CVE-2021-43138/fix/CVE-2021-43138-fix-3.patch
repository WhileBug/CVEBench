
diff --git a/lib/internal/iterator.js b/lib/internal/iterator.js
index d167ff9..698e651 100644
--- a/lib/internal/iterator.js
+++ b/lib/internal/iterator.js
@@ -25,8 +25,13 @@ function createObjectIterator(obj) {
     var i = -1;
     var len = okeys.length;
     return function next() {
-        var key = okeys[++i];
-        return i < len ? {value: obj[key], key} : null;
+        var key;
+        do {
+            i++;
+            key = okeys[i];
+            if (i >= len) return null;
+        } while (!obj.hasOwnProperty(key));
+        return {value: obj[key], key};
     };
 }
 
diff --git a/test_iterator.js b/test_iterator.js
new file mode 100644
index 0000000..3509e9a
--- /dev/null
+++ b/test_iterator.js
@@ -0,0 +1,17 @@
+import createIterator from './lib/internal/iterator';
+
+// Test with a normal object
+const obj = { a: 1, b: 2 };
+const iterator = createIterator(obj);
+let result = iterator();
+console.log('Test with normal object:', result); // Should log: { value: 1, key: 'a' }
+
+// Test with an object that attempts prototype pollution
+const pollutedObj = {};
+Object.prototype.polluted = true;
+const pollutedIterator = createIterator(pollutedObj);
+result = pollutedIterator();
+console.log('Test with polluted object:', result); // Should log: null
+
+// Clean up prototype pollution for further tests
+delete Object.prototype.polluted;
