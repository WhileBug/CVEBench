
diff --git a/frontend/src/_services/app.service.js b/frontend/src/_services/app.service.js
index 194cd750c..699415cc7 100644
--- a/frontend/src/_services/app.service.js
+++ b/frontend/src/_services/app.service.js
@@ -36,12 +36,14 @@ function getAll(page, folder, searchKey) {
     ).then(handleResponse);
 }
 
-function createApp() {
-  const body = {};
+function createApp(appData) {
+  // Ensure appData is validated and sanitized before serialization
+  const body = appData;
 
   const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(body) };
   return fetch(`${config.apiUrl}/apps`, requestOptions).then(handleResponse);
 }
+}
 
 function cloneApp(id) {
   const requestOptions = { method: 'POST', headers: authHeader() };
diff --git a/frontend/src/_services/user.service.js b/frontend/src/_services/user.service.js
index 481a489b6..576e04ce9 100644
--- a/frontend/src/_services/user.service.js
+++ b/frontend/src/_services/user.service.js
@@ -37,6 +37,7 @@ function updateAvatar(formData, token) {
 }
 
 function createUser(first_name, last_name, email, role) {
+  // Ensure all user input is validated and sanitized before serialization
   const body = {
     first_name,
     last_name,
@@ -47,6 +48,7 @@ function createUser(first_name, last_name, email, role) {
   const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(body) };
   return fetch(`${config.apiUrl}/users`, requestOptions).then(handleResponse);
 }
+}
 
 function deleteUser(id) {
   const requestOptions = { method: 'DELETE', headers: authHeader(), body: JSON.stringify({}) };
@@ -78,10 +80,12 @@ function acceptInvite({ token, password }) {
 }
 
 function updateCurrentUser(firstName, lastName) {
+  // Ensure all user input is validated and sanitized before serialization
   const body = { first_name: firstName, last_name: lastName };
   const requestOptions = { method: 'PATCH', headers: authHeader(), body: JSON.stringify(body) };
   return fetch(`${config.apiUrl}/users/update`, requestOptions).then(handleResponse);
 }
+}
 
 function changePassword(currentPassword, newPassword) {
   const body = { currentPassword, newPassword };
diff --git a/server/src/services/organization_users.service.ts b/server/src/services/organization_users.service.ts
index d27f0f7ed..f5273cd76 100644
--- a/server/src/services/organization_users.service.ts
+++ b/server/src/services/organization_users.service.ts
@@ -90,21 +90,28 @@ export class OrganizationUsersService {
     return await this.organizationUsersRepository.update(id, { role });
   }
 
-  async archive(id: string) {
-    await getManager().transaction(async (manager) => {
-      const organizationUser = await manager.findOne(OrganizationUser, {
-        where: { id },
-      });
-      const user = await manager.findOne(User, {
-        where: { id: organizationUser.userId },
-      });
-
-      await this.usersService.throwErrorIfRemovingLastActiveAdmin(user, undefined, organizationUser.organizationId);
-
-      await manager.update(OrganizationUser, id, { status: 'archived', invitationToken: null });
-    });
-
-    return true;
+    async archive(id: string) {
+        console.log('Starting archive process for ID:', id);
+        await getManager().transaction(async (manager) => {
+            console.log('Transaction started');
+            const organizationUser = await manager.findOne(OrganizationUser, {
+                where: { id },
+            });
+            console.log('Organization user found:', organizationUser);
+            const user = await manager.findOne(User, {
+                where: { id: organizationUser.userId },
+            });
+            console.log('User found:', user);
+
+            await this.usersService.throwErrorIfRemovingLastActiveAdmin(user, undefined, organizationUser.organizationId);
+            console.log('Checked for last active admin');
+
+            await manager.update(OrganizationUser, id, { status: 'archived', invitationToken: null });
+            console.log('User status updated to archived');
+        });
+        console.log('Archive process completed for ID:', id);
+        return true;
+    }
   }
 
   async unarchive(user: User, id: string) {
diff --git a/server/test/services/organization_users.service.spec.ts b/server/test/services/organization_users.service.spec.ts
new file mode 100644
index 000000000..c291615ea
--- /dev/null
+++ b/server/test/services/organization_users.service.spec.ts
@@ -0,0 +1,35 @@
+import { Test, TestingModule } from '@nestjs/testing';
+import { OrganizationUsersService } from '../../src/services/organization_users.service';
+import { getRepositoryToken } from '@nestjs/typeorm';
+import { OrganizationUser } from '../../src/entities/organization_user.entity';
+import { Repository } from 'typeorm';
+
+describe('OrganizationUsersService', () => {
+  let service: OrganizationUsersService;
+  let mockRepository: Repository<OrganizationUser>;
+
+  beforeEach(async () => {
+    const module: TestingModule = await Test.createTestingModule({
+      providers: [
+        OrganizationUsersService,
+        {
+          provide: getRepositoryToken(OrganizationUser),
+          useValue: {
+            findOne: jest.fn().mockResolvedValue({ id: '1', status: 'active' }),
+            update: jest.fn().mockResolvedValue(true),
+            create: jest.fn(),
+            save: jest.fn(),
+          },
+        },
+      ],
+    }).compile();
+
+    service = module.get<OrganizationUsersService>(OrganizationUsersService);
+    mockRepository = module.get<Repository<OrganizationUser>>(getRepositoryToken(OrganizationUser));
+  });
+
+  it('should archive a user correctly', async () => {
+    await service.archive('1');
+    expect(mockRepository.update).toHaveBeenCalledWith('1', { status: 'archived', invitationToken: null });
+  });
+});
