
diff --git a/src/Adapters/Storage/Mongo/MongoStorageAdapter.js b/src/Adapters/Storage/Mongo/MongoStorageAdapter.js
index 2b5eaa0f..34a94b84 100644
--- a/src/Adapters/Storage/Mongo/MongoStorageAdapter.js
+++ b/src/Adapters/Storage/Mongo/MongoStorageAdapter.js
@@ -617,11 +617,13 @@ export class MongoStorageAdapter implements StorageAdapter {
           readPreference,
           hint,
           caseInsensitive,
-          explain,
+        validateExplainValue(explain);
         })
       )
       .then(objects => {
         if (explain) {
+            validateExplainValue(explain);
+        }
           return objects;
         }
         return objects.map(object => mongoObjectToParseObject(className, object, schema));
@@ -1085,4 +1087,8 @@ export class MongoStorageAdapter implements StorageAdapter {
   }
 }
 
-export default MongoStorageAdapter;
+function validateExplainValue(explainOption) {
+    if (explainOption !== undefined && typeof explainOption !== 'boolean') {
+        throw new Error('Invalid value for explain option. It must be a boolean.');
+    }
+}
diff --git a/src/RestQuery.js b/src/RestQuery.js
index 6039084e..745f88ca 100644
--- a/src/RestQuery.js
+++ b/src/RestQuery.js
@@ -654,6 +654,10 @@ RestQuery.prototype.runFind = function (options = {}) {
   if (options.op) {
     findOptions.op = options.op;
   }
+  // Validate the 'explain' option to prevent crashes
+  if (findOptions.explain && typeof findOptions.explain !== 'boolean') {
+    throw new Error('Invalid value for explain option. It must be a boolean.');
+  }
   return this.config.database
     .find(this.className, this.restWhere, findOptions, this.auth)
     .then(results => {
