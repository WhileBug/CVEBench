# CVE Exploit Test Script for TimelockController Privilege Escalation
# Mock classes to simulate the CVE scenario
class TimelockController:
    def __init__(self):
        self.roles = {}

    def add_role(self, actor, role):
        if role == 'executor' and 'proposer' in self.roles.get(actor, []):
            raise PermissionError("Cannot escalate to proposer without proper authorization")
        self.roles.setdefault(actor, []).append(role)

class Actor:
    def __init__(self, role):
        self.roles = [role]
        self.name = "Actor with role: " + role

    def add_role(self, role):
        global timelock
        timelock.add_role(self, role)

# Setup the environment and actors
timelock = TimelockController()
executor = Actor(role='executor')
proposer = Actor(role='proposer')

# Initially, executor should not have proposer privileges
executor.add_role('executor')

# Attempt to escalate privileges
try:
    executor.add_role('proposer')
    print('The ACI exploit success!!!')
except PermissionError:
    print('The ACI exploit failed!!!')
