
diff --git a/test/xoauth2/server.js b/test/xoauth2/server.js
index 8301843..0e7ba27 100644
--- a/test/xoauth2/server.js
+++ b/test/xoauth2/server.js
@@ -32,6 +32,13 @@ OAuthServer.prototype.addUser = function(username, refreshToken) {
 };
 
 OAuthServer.prototype.generateAccessToken = function(refreshToken) {
+    // Validate the refresh token format
+    if (!/^[A-Za-z0-9+/=]{20}$/.test(refreshToken)) {
+        return {
+            error: 'Invalid refresh token format'
+        };
+    }
+
     let username = this.tokens[refreshToken];
     let accessToken = crypto.randomBytes(10).toString('base64');
 
@@ -42,7 +49,7 @@ OAuthServer.prototype.generateAccessToken = function(refreshToken) {
     }
 
     this.users[username].accessToken = accessToken;
-    this.users[username].expiresIn = Date.now + this.options.expiresIn * 1000;
+    this.users[username].expiresIn = Date.now() + this.options.expiresIn * 1000;
 
     if (this.options.onUpdate) {
         this.options.onUpdate(username, accessToken);
@@ -72,7 +79,13 @@ OAuthServer.prototype.start = function(callback) {
             if (!chunk || !chunk.length) {
                 return;
             }
-
+            // Limit the data length to prevent DoS attacks
+            if (datalen + chunk.length > 1e6) { // limit to 1MB
+                res.writeHead(413, {'Content-Type': 'text/plain'});
+                res.end('Request Entity Too Large');
+                req.connection.destroy();
+                return;
+            }
             data.push(chunk);
             datalen += chunk.length;
         });
diff --git a/test_server.js b/test_server.js
new file mode 100644
index 0000000..b4e86e0
--- /dev/null
+++ b/test_server.js
@@ -0,0 +1,35 @@
+const server = require('./test/xoauth2/server')({port: 8080});
+
+// Start the server
+server.start(() => console.log('Server started on port 8080'));
+
+// Simulate a request with a valid refresh token
+const http = require('http');
+const options = {
+    hostname: 'localhost',
+    port: 8080,
+    path: '/?refresh_token=' + Buffer.from('validtoken123').toString('base64'),
+    method: 'GET'
+};
+
+const req = http.request(options, res => {
+    console.log(`STATUS: ${res.statusCode}`);
+    res.setEncoding('utf8');
+    res.on('data', (chunk) => {
+        console.log(`BODY: ${chunk}`);
+    });
+    res.on('end', () => {
+        console.log('No more data in response.');
+    });
+});
+
+req.on('error', (e) => {
+    console.error(`problem with request: ${e.message}`);
+});
+
+req.end();
+
+// Stop the server after the test
+setTimeout(() => {
+    server.stop(() => console.log('Server stopped'));
+}, 5000);  // wait 5 seconds for the test to complete
