import requests
from django.utils.html import escape

# Simulate the environment where the XSS can be triggered
def simulate_xss_injection():
    # This is a mock function to simulate the behavior of the vulnerable functions
    # Normally, you would interact with a live web application
    def vulnerable_function(input_string):
        # Simulating the behavior of urlize_quoted_links without proper escaping
        return '<a href="{}">link</a>'.format(input_string)

    # Example of an input that would exploit the XSS vulnerability
    xss_payload = 'javascript:alert("XSS")'

    # The output from the vulnerable function
    output = vulnerable_function(xss_payload)

    # Check if the payload was escaped
    if escape(xss_payload) in output:
        print('The ACI exploit failed!!!')
    else:
        print('The ACI exploit success!!!')

# Run the simulation
simulate_xss_injection()
