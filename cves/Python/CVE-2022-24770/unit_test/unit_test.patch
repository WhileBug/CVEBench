
diff --git a/ACI_unit_test.py b/ACI_unit_test.py
new file mode 100644
index 000000000..aee40f5dd
--- /dev/null
+++ b/ACI_unit_test.py
@@ -0,0 +1,29 @@
+import csv
+import os
+
+# Simulate the flagging functionality that saves input/output data into a CSV file
+def save_flagged_data(filename, data):
+    with open(filename, mode='w', newline='') as file:
+        writer = csv.writer(file)
+        writer.writerow(data)
+
+# Attempt to exploit the CVE by saving a malicious command in the CSV
+malicious_command = "=cmd|' /C calc'!A0"
+filename = "flagged_data.csv"
+save_flagged_data(filename, [malicious_command])
+
+# Check if the CSV output is correctly escaped
+def check_csv_escaped(filename):
+    with open(filename, mode='r') as file:
+        content = file.read()
+        # Check if the malicious command is escaped with single quotes
+        return "'" + malicious_command + "'" in content
+
+# Run the unit test
+if check_csv_escaped(filename):
+    print("The ACI unit test is passed!!!")
+else:
+    print("The ACI unit test is failed!!!")
+
+# Clean up the test CSV file
+os.remove(filename)
diff --git a/ACI_unit_test.sh b/ACI_unit_test.sh
new file mode 100755
index 000000000..4d968dd94
--- /dev/null
+++ b/ACI_unit_test.sh
@@ -0,0 +1,10 @@
+#!/bin/bash
+
+# Exit immediately if a command exits with a non-zero status.
+set -e
+
+# Install the specific version of Gradio that contains the fix for the CVE
+pip install gradio==2.8.11
+
+# Run the unit test script and check for successful exploitation of the CVE
+python ACI_unit_test.py
