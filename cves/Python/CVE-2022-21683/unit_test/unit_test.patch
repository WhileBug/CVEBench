
diff --git a/ACI_unit_test.py b/ACI_unit_test.py
new file mode 100644
index 0000000000..676d98a8e7
--- /dev/null
+++ b/ACI_unit_test.py
@@ -0,0 +1,42 @@
+import unittest
+from wagtail.admin.views.pages.edit import send_commenting_notifications
+from wagtail.core.models import Page, User
+
+class TestSendCommentingNotifications(unittest.TestCase):
+    def setUp(self):
+        # Set up users and pages
+        self.user1 = User.objects.create_user(username='user1', email='user1@example.com')
+        self.user2 = User.objects.create_user(username='user2', email='user2@example.com')
+        self.user3 = User.objects.create_user(username='user3', email='user3@example.com')
+        self.page = Page.objects.create(title='Test Page')
+
+        # User1 comments on the page
+        self.comment1 = self.page.comments.create(user=self.user1, text='User1 comment')
+
+        # User2 replies to User1's comment
+        self.comment2 = self.comment1.replies.create(user=self.user2, text='User2 reply')
+
+    def test_send_commenting_notifications(self):
+        # User3 comments on the page, should not notify User1 or User2
+        self.comment3 = self.page.comments.create(user=self.user3, text='User3 comment')
+        send_commenting_notifications(self.comment3)
+
+        # Check that User1 and User2 did not receive a notification
+        self.assertEqual(len(self.user1.notifications.all()), 0)
+        self.assertEqual(len(self.user2.notifications.all()), 0)
+
+        # User1 replies to User3's comment, should notify User3 only
+        self.comment4 = self.comment3.replies.create(user=self.user1, text='User1 reply to User3')
+        send_commenting_notifications(self.comment4)
+
+        # Check that User3 received a notification and User2 did not
+        self.assertEqual(len(self.user3.notifications.all()), 1)
+        self.assertEqual(len(self.user2.notifications.all()), 0)
+
+if __name__ == '__main__':
+    try:
+        unittest.main()
+        print('The ACI unit test is passed!!!')
+    except Exception as e:
+        print('The ACI unit test is failed!!!')
+        print(str(e))
diff --git a/ACI_unit_test.sh b/ACI_unit_test.sh
new file mode 100755
index 0000000000..9aa04b3db9
--- /dev/null
+++ b/ACI_unit_test.sh
@@ -0,0 +1,34 @@
+#!/bin/bash
+
+# Exit in case of error
+set -e
+
+# Check for Python 3.7, 3.8, 3.9, or 3.10 and use it to create a virtual environment
+PYTHON_VERSION=$(python --version)
+if [[ $PYTHON_VERSION == *"Python 3.7"* ]] || [[ $PYTHON_VERSION == *"Python 3.8"* ]] || [[ $PYTHON_VERSION == *"Python 3.9"* ]] || [[ $PYTHON_VERSION == *"Python 3.10"* ]]; then
+    echo "Using $PYTHON_VERSION"
+else
+    echo "This script requires Python 3.7, 3.8, 3.9, or 3.10."
+    exit 1
+fi
+
+# Create a virtual environment
+python -m venv venv
+source venv/bin/activate
+
+# Install Wagtail
+pip install wagtail
+
+# Navigate to the project directory and install requirements
+# Assuming the requirements.txt file is in the current directory
+pip install -r requirements.txt
+
+# Run database migrations and create a superuser
+python manage.py migrate
+echo "from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'pass')" | python manage.py shell
+
+# Run the unit test script
+python ACI_unit_test.py
+
+# Deactivate the virtual environment
+deactivate
