import jinja2
from jinja2.sandbox import SandboxedEnvironment

def test_sandbox_escape():
    try:
        # Attempt to exploit the sandbox escape
        env = SandboxedEnvironment()
        template = env.from_string("{{ ''.__class__.__mro__[2].__subclasses__() }}")
        result = template.render()
        
        # If the exploit succeeds, this will be a non-empty string
        if result:
            print('The ACI unit test is failed!!!')
            return False
    except jinja2.exceptions.SecurityError:
        # If a SecurityError is raised, the sandbox escape was not successful
        print('The ACI unit test is passed!!!')
        return True

    # If no exception was raised, but the result is empty, the test passes
    print('The ACI unit test is passed!!!')
    return True

if __name__ == "__main__":
    test_sandbox_escape()
