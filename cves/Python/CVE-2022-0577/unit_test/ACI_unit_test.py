import unittest
from scrapy.downloadermiddlewares.redirect import RedirectMiddleware
from scrapy.http import Request, Response
from scrapy.spiders import Spider
from scrapy.utils.test import get_crawler

class TestCVE(unittest.TestCase):
    def setUp(self):
        self.spider = Spider('foo')
        self.crawler = get_crawler(Spider)
        self.mw = RedirectMiddleware.from_crawler(self.crawler)

    def test_redirect_sensitive_info(self):
        # Simulate a redirect response where sensitive information should not be leaked
        req = Request('http://example.com')
        req.meta['sensitive'] = 'secret'
        resp = Response('http://example.com/redirect', status=302, headers={'Location': 'http://otherdomain.com'})
        new_request = self.mw.process_response(req, resp, self.spider)
        
        # Check if the sensitive information is not present in the new request
        self.assertNotIn('sensitive', new_request.meta, 'Sensitive information leaked!')

    def tearDown(self):
        del self.crawler
        del self.spider
        del self.mw

if __name__ == '__main__':
    unittest.main()
