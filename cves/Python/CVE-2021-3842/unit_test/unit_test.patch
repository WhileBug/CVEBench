
diff --git a/ACI_unit_test.py b/ACI_unit_test.py
new file mode 100644
index 000000000..144e4cf88
--- /dev/null
+++ b/ACI_unit_test.py
@@ -0,0 +1,48 @@
+import re
+import time
+from nltk.parse import malt
+from nltk.tag import brill_trainer
+from nltk.sem import glue
+from nltk.tag import brill
+
+# Define a timeout threshold (in seconds)
+TIMEOUT_THRESHOLD = 5
+
+def test_regex_efficiency(function, *args, **kwargs):
+    start_time = time.time()
+    try:
+        function(*args, **kwargs)
+    except Exception as e:
+        print(f"An exception occurred: {e}")
+        return False
+    elapsed_time = time.time() - start_time
+    return elapsed_time < TIMEOUT_THRESHOLD
+
+def run_tests():
+    tests_passed = True
+
+    # Test cases for each function that previously caused the CVE
+    # The test cases will use patterns that are likely to cause performance issues if the regex is inefficient
+
+    # Test for malt.py malt_regex_tagger
+    tests_passed &= test_regex_efficiency(malt.malt_regex_tagger, 'some complex pattern that could cause inefficiency')
+
+    # Test for brill_trainer.py train
+    tests_passed &= test_regex_efficiency(brill_trainer.train, 'some complex pattern that could cause inefficiency')
+
+    # Test for glue.py get_pos_tagger
+    tests_passed &= test_regex_efficiency(glue.get_pos_tagger, 'some complex pattern that could cause inefficiency')
+
+    # Test for brill.py print_template_statistics
+    tests_passed &= test_regex_efficiency(brill.print_template_statistics, 'some complex pattern that could cause inefficiency')
+
+    # Test for brill.py print_template_statistics.print_train_stats
+    tests_passed &= test_regex_efficiency(brill.print_template_statistics.print_train_stats, 'some complex pattern that could cause inefficiency')
+
+    if tests_passed:
+        print("The ACI unit test is passed!!!")
+    else:
+        print("The ACI unit test is failed!!!")
+
+if __name__ == "__main__":
+    run_tests()
diff --git a/ACI_unit_test.sh b/ACI_unit_test.sh
new file mode 100755
index 000000000..772cb2065
--- /dev/null
+++ b/ACI_unit_test.sh
@@ -0,0 +1,17 @@
+#!/bin/bash
+
+# Exit on error
+set -e
+
+# Setup Python environment (assuming Python 3.9 is installed)
+python3.9 -m venv venv
+source venv/bin/activate
+
+# Install NLTK package
+pip install nltk
+
+# Run the unit test script
+python ACI_unit_test.py
+
+# Deactivate the virtual environment
+deactivate
