
diff --git a/ACI_unit_test.py b/ACI_unit_test.py
new file mode 100644
index 0000000000..86fad1d6fd
--- /dev/null
+++ b/ACI_unit_test.py
@@ -0,0 +1,45 @@
+import unittest
+from zerver.views.registration import accounts_register
+from zerver.models import UserProfile, get_realm, get_user
+from django.http import HttpRequest
+from django.core.exceptions import ValidationError
+
+class TestCVE201918933(unittest.TestCase):
+    def setUp(self):
+        # Setup test pre-conditions here
+        pass
+
+    def test_ensure_no_empty_passwords(self):
+        # Simulate user registration with social authentication
+        request = HttpRequest()
+        request.session = {}
+        request.POST = {'password': ''}
+        realm = get_realm('zulip')
+        
+        # Attempt to create a user with an empty password
+        try:
+            accounts_register(request)
+        except ValidationError as e:
+            self.assertIn('password cannot be empty', str(e))
+        
+        # Check if the user has been created with an empty password
+        user = get_user('new_social_user@example.com', realm)
+        self.assertIsNotNone(user)
+        self.assertNotEqual(user.api_key, '')
+
+    def test_ensure_no_empty_passwords_write_realm_audit_log_entry(self):
+        # Test the write_realm_audit_log_entry function for empty passwords
+        pass
+
+    def test_reset_user_api_key(self):
+        # Test the reset_user_api_key function for empty passwords
+        pass
+
+if __name__ == '__main__':
+    try:
+        unittest.main()
+    except SystemExit as e:
+        if e.code == 0:
+            print('The ACI unit test is passed!!!')
+        else:
+            print('The ACI unit test is failed!!!')
diff --git a/ACI_unit_test.sh b/ACI_unit_test.sh
new file mode 100755
index 0000000000..20eea7e48b
--- /dev/null
+++ b/ACI_unit_test.sh
@@ -0,0 +1,19 @@
+#!/bin/bash
+
+# Exit on first error
+set -e
+
+# Create a Python virtual environment
+python3 -m venv venv
+
+# Activate the virtual environment
+source venv/bin/activate
+
+# Install dependencies (assuming requirements are defined in a standard requirements file)
+pip install -r requirements/dev.txt
+
+# Run the unit test script
+python ACI_unit_test.py
+
+# Deactivate the virtual environment
+deactivate
