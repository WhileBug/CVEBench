
diff --git a/ACI_unit_test.py b/ACI_unit_test.py
new file mode 100644
index 0000000000..8563ff5a9a
--- /dev/null
+++ b/ACI_unit_test.py
@@ -0,0 +1,31 @@
+import os
+import tempfile
+from salt.modules import chef
+
+# Attempt to exploit the CVE by calling the _default_logfile function
+# and checking if it improperly handles files in /tmp or other insecure locations
+def test_default_logfile_exploit():
+    try:
+        # Create a temporary file in the /tmp directory
+        tmp_file = tempfile.NamedTemporaryFile(dir='/tmp', delete=False)
+        tmp_file_path = tmp_file.name
+        tmp_file.close()
+
+        # Call the _default_logfile function with the path of the temporary file
+        logfile_path = chef._default_logfile(tmp_file_path)
+
+        # Check if the _default_logfile function returns a path that is not the temporary file
+        # This would indicate that the function is not using insecure file handling
+        if logfile_path != tmp_file_path:
+            print('The ACI unit test is passed!!!')
+        else:
+            print('The ACI unit test is failed!!!')
+
+        # Clean up the temporary file
+        os.unlink(tmp_file_path)
+
+    except Exception as e:
+        print(f'The ACI unit test is failed!!! Exception occurred: {e}')
+
+# Run the test
+test_default_logfile_exploit()
diff --git a/ACI_unit_test.sh b/ACI_unit_test.sh
new file mode 100755
index 0000000000..4a2c021572
--- /dev/null
+++ b/ACI_unit_test.sh
@@ -0,0 +1,14 @@
+#!/bin/bash
+
+# Exit on any error
+set -e
+
+# Check for a requirements.txt or setup.py file and install dependencies if they exist
+if [ -f requirements.txt ]; then
+    pip install -r requirements.txt
+elif [ -f setup.py ]; then
+    python setup.py install
+fi
+
+# Run the unit test script
+python ACI_unit_test.py
diff --git a/salt/__init__.py b/salt/__init__.py
index dd82a7dde0..f6b3a2135a 100644
--- a/salt/__init__.py
+++ b/salt/__init__.py
@@ -209,7 +209,7 @@ class Minion(parsers.MinionOptionParser):
                                                                     'udp://',
                                                                     'file://')):
                         # Logfile is not using Syslog, verify
-                        current_umask = os.umask(0077)
+                        current_umask = os.umask(0o077)
                         verify_files([logfile], self.config['user'])
                         os.umask(current_umask)
             except OSError as err:
