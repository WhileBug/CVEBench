
diff --git a/ACI_unit_test.py b/ACI_unit_test.py
new file mode 100644
index 0000000000..057bb4b6b8
--- /dev/null
+++ b/ACI_unit_test.py
@@ -0,0 +1,38 @@
+import django
+from django.conf import settings
+from django.contrib.postgres.aggregates.general import StringAgg
+from django.db.models import CharField, Value as V
+from django.db.models.functions import Concat
+
+# Configure Django settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.postgres',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': 'mydatabase',
+        }
+    },
+    USE_TZ=True,
+)
+
+# Setup Django environment
+django.setup()
+
+# Simulate a model field
+from django.db import models
+
+# Simulate the use of a malicious delimiter in StringAgg
+malicious_delimiter = "'), ('MALICIOUS_CODE'); --"
+agg = StringAgg('field', delimiter=malicious_delimiter)
+
+# Simulated output to check if the delimiter is being escaped properly
+simulated_output = f"SELECT string_agg(field, '{malicious_delimiter}') FROM table;"
+if "MALICIOUS_CODE" in simulated_output:
+    print('The ACI exploit success!!!')
+else:
+    print('The ACI exploit failed!!!')
diff --git a/ACI_unit_test.sh b/ACI_unit_test.sh
new file mode 100644
index 0000000000..c56d785616
--- /dev/null
+++ b/ACI_unit_test.sh
@@ -0,0 +1,8 @@
+
+# Setup the Django environment
+echo "Setting up Django environment..."
+pip install django psycopg2-binary pytz
+
+# Run the Python script to test the exploit
+echo "Running the exploit test..."
+python ACI_unit_test.py
