
diff --git a/server/src/main/java/com/thoughtworks/go/addon/businesscontinuity/standby/controller/DashBoardController.java b/server/src/main/java/com/thoughtworks/go/addon/businesscontinuity/standby/controller/DashBoardController.java
index 7a57114520..0ed90ea297 100644
--- a/server/src/main/java/com/thoughtworks/go/addon/businesscontinuity/standby/controller/DashBoardController.java
+++ b/server/src/main/java/com/thoughtworks/go/addon/businesscontinuity/standby/controller/DashBoardController.java
@@ -143,74 +143,41 @@ public class DashBoardController {
         return "bad credentials!";
     }
 
-    private String showStatusJSON(HttpServletRequest request, HttpServletResponse response) {
-        response.setContentType("application/json");
-        if (addOnConfiguration.isServerInStandby()) {
-
-            Map<String, Object> dashboardContent = new HashMap<>();
-            UsernamePassword usernamePassword = extractBasicAuthenticationCredentials(request.getHeader("Authorization"));
-            dashboardContent.put("userName", usernamePassword.getUsername());
-            if (!primaryServerCommunicationService.ableToConnect()) {
-                dashboardContent.put("setupStatus", "incomplete");
-                dashboardContent.put("syncErrors", Collections.singletonList("Unable to connect to primary, please check that the business-continuity-token file is identical on primary and secondary, and that this server can connect to the primary server."));
-            } else {
-                dashboardContent.put("setupStatus", "success");
-                dashboardContent.put("primaryServerDetails", primaryServerDetails());
-                dashboardContent.put("standbyServerDetails", standbyServerDetails());
-                dashboardContent.put("syncErrors", standbyFileSyncService.syncErrors());
-            }
-            return GSON.toJson(dashboardContent);
-        }
-        throw new RuntimeException("This information only available for standby server");
-    }
-
-    Map<String, Object> standbyServerDetails() {
-        Map<String, Object> details = new HashMap<>();
-        details.put("primaryStatusCheckInterval", standbyFileSyncService.primaryStatusCheckInterval());
-        details.put("lastUpdateTime", new Date(standbyFileSyncService.lastUpdateTime()));
-        details.put("latestReceivedDatabaseWalLocation", databaseStatusProvider.latestReceivedWalLocation());
-        Map<ConfigFileType, String> currentFileStatus = standbyFileSyncService.getCurrentFileStatus();
-        for (ConfigFileType configFileType : currentFileStatus.keySet()) {
-            details.put(configFileType.name(), currentFileStatus.get(configFileType));
-        }
-        details.put("pluginStatus", standbyPluginStatus());
-        return details;
-    }
-
-    Map<String, Object> primaryServerDetails() {
-        Map<String, Object> details = new HashMap<>();
-
-        String primaryServerUrl = primaryServerCommunicationService.primaryServerUrl();
-        details.put("url", primaryServerUrl);
-
-
-        try {
-            details.put("latestDatabaseWalLocation", primaryServerCommunicationService.latestDatabaseWalLocation());
-            ServerStatusResponse latestFileStatus = primaryServerCommunicationService.getLatestFileStatus();
-            details.put("configFilesUpdateInterval", latestFileStatus.getConfigFilesUpdateInterval());
-            details.put("lastConfigUpdateTime", new Date(latestFileStatus.getLastConfigFilesUpdateTime()));
-            Map<ConfigFileType, FileDetails> fileDetailsMap = latestFileStatus.getFileDetailsMap();
-            for (ConfigFileType fileType : fileDetailsMap.keySet()) {
-                details.put(fileType.name(), fileDetailsMap.get(fileType));
-            }
-
-            details.put("pluginStatus", primaryPluginStatus());
-        } catch (Exception e) {
-            details.put("error", format("Could not fetch latest file status from master, Reason, %s", e.getMessage()));
+private String showStatusJSON(HttpServletRequest request, HttpServletResponse response) {
+    response.setContentType("application/json");
+    if (addOnConfiguration.isServerInStandby()) {
+        Map<String, Object> dashboardContent = new HashMap<>();
+        UsernamePassword usernamePassword = extractBasicAuthenticationCredentials(request.getHeader("Authorization"));
+        dashboardContent.put("userName", usernamePassword.getUsername());
+        if (!primaryServerCommunicationService.ableToConnect()) {
+            dashboardContent.put("setupStatus", "incomplete");
+            dashboardContent.put("syncErrors", Collections.singletonList("Unable to connect to primary, please check that the business-continuity-token file is identical on primary and secondary, and that this server can connect to the primary server."));
+        } else {
+            dashboardContent.put("setupStatus", "success");
+            dashboardContent.put("primaryServerDetails", primaryServerDetailsMinimal());
+            dashboardContent.put("standbyServerDetails", standbyServerDetailsMinimal());
+            dashboardContent.put("syncErrors", standbyFileSyncService.syncErrors());
         }
-        return details;
+        return GSON.toJson(dashboardContent);
     }
+    throw new RuntimeException("This information only available for standby server");
+}
 
-    private String standbyPluginStatus() {
-        final Map<String, String> currentExternalPluginsStatus = standbyFileSyncService.getCurrentExternalPluginsStatus();
-        List<String> pluginsMd5 = currentExternalPluginsStatus.keySet().stream().map(pluginName -> format("%s=%s", pluginName, currentExternalPluginsStatus.get(pluginName))).sorted().collect(Collectors.toList());
-
-        return join(pluginsMd5, ", ");
-    }
+Map<String, Object> standbyServerDetailsMinimal() {
+    Map<String, Object> details = new HashMap<>();
+    details.put("primaryStatusCheckInterval", standbyFileSyncService.primaryStatusCheckInterval());
+    details.put("lastUpdateTime", new Date(standbyFileSyncService.lastUpdateTime()));
+    return details;
+}
 
-    private String primaryPluginStatus() {
-        List<Map> externalPlugins = (List<Map>) primaryServerCommunicationService.getLatestPluginsStatus().get("external");
-        return externalPlugins.stream().map(map -> format("%s=%s", map.get("name"), map.get("md5"))).collect(Collectors.joining(", "));
+Map<String, Object> primaryServerDetailsMinimal() {
+    Map<String, Object> details = new HashMap<>();
+    String primaryServerUrl = primaryServerCommunicationService.primaryServerUrl();
+    details.put("url", primaryServerUrl);
+    try {
+        details.put("latestDatabaseWalLocation", primaryServerCommunicationService.latestDatabaseWalLocation());
+    } catch (Exception e) {
+        details.put("error", format("Could not fetch latest file status from master, Reason, %s", e.getMessage()));
     }
-
+    return details;
 }
