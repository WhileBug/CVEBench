
diff --git a/server-plugin/server-plugin-executor-kubernetes/src/main/java/io/onedev/server/plugin/executor/kubernetes/KubernetesResource.java b/server-plugin/server-plugin-executor-kubernetes/src/main/java/io/onedev/server/plugin/executor/kubernetes/KubernetesResource.java
index c1271a202..87fb349bc 100644
--- a/server-plugin/server-plugin-executor-kubernetes/src/main/java/io/onedev/server/plugin/executor/kubernetes/KubernetesResource.java
+++ b/server-plugin/server-plugin-executor-kubernetes/src/main/java/io/onedev/server/plugin/executor/kubernetes/KubernetesResource.java
@@ -73,21 +73,24 @@ public class KubernetesResource {
 	@Consumes(MediaType.APPLICATION_OCTET_STREAM)
 	@Produces(MediaType.APPLICATION_OCTET_STREAM)
     @POST
-    public byte[] allocateJobCaches(byte[] cacheAllocationRequestBytes) {
-		CacheAllocationRequest allocationRequest = (CacheAllocationRequest) SerializationUtils
-				.deserialize(cacheAllocationRequestBytes);
-		return SerializationUtils.serialize((Serializable) jobManager.allocateJobCaches(
-				getJobToken(), allocationRequest.getCurrentTime(), allocationRequest.getInstances()));
-    }
+        if (!isValidJobToken(getJobToken())) {
+            throw new GeneralException("Unauthorized access");
+        }
+        // Deserialize with validation to ensure data integrity and safety
+        CacheAllocationRequest allocationRequest = validateAndDeserialize(cacheAllocationRequestBytes);
+        // This line is removed as we now use validateAndDeserialize for safe deserialization
+        return SerializationUtils.serialize((Serializable) jobManager.allocateJobCaches(
+            getJobToken(), allocationRequest.getCurrentTime(), allocationRequest.getInstances()));
 	
 	@Path("/report-job-caches")
 	@Consumes(MediaType.APPLICATION_OCTET_STREAM)
-	@POST
-	public void reportJobCaches(byte[] cacheInstanceBytes) {
-		@SuppressWarnings("unchecked")
-		Collection<CacheInstance> cacheInstances = (Collection<CacheInstance>) SerializationUtils
-				.deserialize(cacheInstanceBytes);
-		jobManager.reportJobCaches(getJobToken(), cacheInstances);
+        if (!isValidJobToken(getJobToken())) {
+            throw new GeneralException("Unauthorized access");
+        }
+        @SuppressWarnings("unchecked")
+        Collection<CacheInstance> cacheInstances = (Collection<CacheInstance>) SerializationUtils
+            .deserialize(cacheInstanceBytes);
+        jobManager.reportJobCaches(getJobToken(), cacheInstances);
 	}
 	
 	@Path("/download-dependencies")
