
diff --git a/core/src/main/java/jenkins/security/CryptoConfidentialKey.java b/core/src/main/java/jenkins/security/CryptoConfidentialKey.java
index dd1dad9e37..0986b5f534 100644
--- a/core/src/main/java/jenkins/security/CryptoConfidentialKey.java
+++ b/core/src/main/java/jenkins/security/CryptoConfidentialKey.java
@@ -48,28 +48,30 @@ public class CryptoConfidentialKey extends ConfidentialKey {
     /**
      * Returns a {@link Cipher} object for encrypting with this key.
      */
-    public Cipher encrypt() {
-        try {
-            Cipher cipher = Secret.getCipher(ALGORITHM);
-            cipher.init(Cipher.ENCRYPT_MODE, getKey());
-            return cipher;
-        } catch (GeneralSecurityException e) {
-            throw new AssertionError(e);
-        }
+public Cipher encrypt() {
+    try {
+        Cipher cipher = Secret.getCipher("AES/CBC/PKCS5Padding");
+        byte[] iv = ConfidentialStore.get().randomBytes(cipher.getBlockSize());
+        IvParameterSpec ivSpec = new IvParameterSpec(iv);
+        cipher.init(Cipher.ENCRYPT_MODE, getKey(), ivSpec);
+        return cipher;
+    } catch (GeneralSecurityException e) {
+        throw new AssertionError(e);
     }
-
     /**
      * Returns a {@link Cipher} object for decrypting with this key.
      */
-    public Cipher decrypt() {
+    public Cipher decrypt(byte[] iv) {
         try {
-            Cipher cipher = Secret.getCipher(ALGORITHM);
-            cipher.init(Cipher.DECRYPT_MODE, getKey());
+            Cipher cipher = Secret.getCipher("AES/CBC/PKCS5Padding");
+            IvParameterSpec ivSpec = new IvParameterSpec(iv);
+            cipher.init(Cipher.DECRYPT_MODE, getKey(), ivSpec);
             return cipher;
         } catch (GeneralSecurityException e) {
             throw new AssertionError(e);
         }
     }
+    }
 
 
     private static final String ALGORITHM = "AES";
