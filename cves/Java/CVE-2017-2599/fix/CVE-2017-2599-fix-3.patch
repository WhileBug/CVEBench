
diff --git a/core/src/main/java/jenkins/security/QueueItemAuthenticator.java b/core/src/main/java/jenkins/security/QueueItemAuthenticator.java
index accfa0c134..0bec89a60b 100644
--- a/core/src/main/java/jenkins/security/QueueItemAuthenticator.java
+++ b/core/src/main/java/jenkins/security/QueueItemAuthenticator.java
@@ -37,8 +37,11 @@ public abstract class QueueItemAuthenticator extends AbstractDescribableImpl<Que
      *      configured {@link QueueItemAuthenticator} will be given a chance to authenticate
      *      the executor. If everything fails, fall back to {@link Task#getDefaultAuthentication()}.
      */
-    public @CheckForNull Authentication authenticate(Queue.Item item) {
         if (Util.isOverridden(QueueItemAuthenticator.class, getClass(), "authenticate", Queue.Task.class)) {
+            // Check if the user has permissions to access the item
+            if (!item.hasPermission(item.task.getACL(), Jenkins.ADMINISTER)) {
+                return null; // Deny access if the user does not have the required permissions
+            }
             return authenticate(item.task);
         } else {
             throw new AbstractMethodError("you must override at least one of the QueueItemAuthenticator.authenticate methods");
diff --git a/core/src/test/java/jenkins/security/QueueItemAuthenticatorTest.java b/core/src/test/java/jenkins/security/QueueItemAuthenticatorTest.java
new file mode 100644
index 0000000000..5c4faa4724
--- /dev/null
+++ b/core/src/test/java/jenkins/security/QueueItemAuthenticatorTest.java
@@ -0,0 +1,29 @@
+package jenkins.security;
+
+import static org.junit.Assert.assertNull;
+import static org.mockito.Mockito.*;
+
+import hudson.model.Queue;
+import org.acegisecurity.Authentication;
+import org.junit.Test;
+
+public class QueueItemAuthenticatorTest {
+
+    @Test
+    public void testPermissionCheck() {
+        QueueItemAuthenticator authenticator = new QueueItemAuthenticator() {
+            @Override
+            public Authentication authenticate(Queue.Task task) {
+                return null; // Simplified for testing
+            }
+        };
+
+        Queue.Item item = mock(Queue.Item.class);
+        Queue.Task task = mock(Queue.Task.class);
+        when(item.task()).thenReturn(task);
+        when(item.hasPermission(any(), eq(Jenkins.ADMINISTER))).thenReturn(false);
+
+        Authentication result = authenticator.authenticate(item);
+        assertNull("Access should be denied", result);
+    }
+}
