
diff --git a/hsweb-system/hsweb-system-workflow/hsweb-system-workflow-local/src/main/java/org/hswebframework/web/workflow/web/FlowableModelManagerController.java b/hsweb-system/hsweb-system-workflow/hsweb-system-workflow-local/src/main/java/org/hswebframework/web/workflow/web/FlowableModelManagerController.java
index 72202a2c4..f597f89c9 100644
--- a/hsweb-system/hsweb-system-workflow/hsweb-system-workflow-local/src/main/java/org/hswebframework/web/workflow/web/FlowableModelManagerController.java
+++ b/hsweb-system/hsweb-system-workflow/hsweb-system-workflow-local/src/main/java/org/hswebframework/web/workflow/web/FlowableModelManagerController.java
@@ -136,6 +136,11 @@ public class FlowableModelManagerController {
                        @PathVariable("type") @ApiParam(value = "类型", allowableValues = "bpmn,json", example = "json") String type,
                        @ApiParam(hidden = true) HttpServletResponse response) {
         try {
+            // Sanitize the 'type' parameter to prevent XSS
+            if (!type.equals("bpmn") && !type.equals("json")) {
+                throw new IllegalArgumentException("Unsupported type: " + type);
+            }
+
             Model modelData = repositoryService.getModel(modelId);
             BpmnJsonConverter jsonConverter = new BpmnJsonConverter();
             byte[] modelEditorSource = repositoryService.getModelEditorSource(modelData.getId());
@@ -143,7 +148,7 @@ public class FlowableModelManagerController {
             JsonNode editorNode = new ObjectMapper().readTree(modelEditorSource);
             BpmnModel bpmnModel = jsonConverter.convertToBpmnModel(editorNode);
 
-            // 处理异常
+            // Handle exception
             if (bpmnModel.getMainProcess() == null) {
                 response.setStatus(HttpStatus.UNPROCESSABLE_ENTITY.value());
                 response.getOutputStream().println("no main process, can't export for dimension: " + type);
@@ -157,25 +162,19 @@ public class FlowableModelManagerController {
             String mainProcessId = bpmnModel.getMainProcess().getId();
 
             if ("bpmn".equals(type)) {
-
                 BpmnXMLConverter xmlConverter = new BpmnXMLConverter();
                 exportBytes = xmlConverter.convertToXML(bpmnModel);
-
                 filename = mainProcessId + ".bpmn20.xml";
             } else if ("json".equals(type)) {
-
                 exportBytes = modelEditorSource;
                 filename = mainProcessId + ".json";
-
-            } else {
-                throw new UnsupportedOperationException("不支持的格式:" + type);
             }
 
             response.setCharacterEncoding("UTF-8");
             response.setContentType("application/octet-stream");
             response.setHeader("Content-Disposition", "attachment; filename=" + URLEncoder.encode(filename, "UTF-8"));
 
-            /*创建输入流*/
+            /* Create input stream */
             try (ByteArrayInputStream in = new ByteArrayInputStream(exportBytes)) {
                 IOUtils.copy(in, response.getOutputStream());
                 response.flushBuffer();
@@ -183,7 +182,7 @@ public class FlowableModelManagerController {
             }
 
         } catch (Exception e) {
-            log.error("导出model的xml文件失败：modelId={}, type={}", modelId, type, e);
+            log.error("Failed to export model XML file: modelId={}, type={}", modelId, type, e);
         }
     }
 
@@ -243,4 +242,4 @@ public class FlowableModelManagerController {
         repositoryService.deleteModel(modelId);
         return ResponseMessage.ok();
     }
-}
\ No newline at end of file
+}
