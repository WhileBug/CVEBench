
diff --git a/core/src/main/java/jenkins/security/BasicHeaderProcessor.java b/core/src/main/java/jenkins/security/BasicHeaderProcessor.java
index 1469fa841e..86e6b5f7b5 100644
--- a/core/src/main/java/jenkins/security/BasicHeaderProcessor.java
+++ b/core/src/main/java/jenkins/security/BasicHeaderProcessor.java
@@ -61,13 +61,19 @@ public class BasicHeaderProcessor implements Filter {
         HttpServletResponse rsp = (HttpServletResponse) response;
         String authorization = req.getHeader("Authorization");
 
-        if (authorization!=null && authorization.startsWith("Basic ")) {
+        if (req.getMethod().equals("GET") && authorization != null) {
+            LOGGER.log(WARNING, "GET request with Authorization header, potential CSRF vulnerability");
+            rsp.sendError(HttpServletResponse.SC_BAD_REQUEST, "GET requests are not allowed for this operation.");
+            return;
+        }
+
+        if (authorization != null && authorization.startsWith("Basic ")) {
             // authenticate the user
             String uidpassword = Scrambler.descramble(authorization.substring(6));
             int idx = uidpassword.indexOf(':');
             if (idx >= 0) {
                 String username = uidpassword.substring(0, idx);
-                String password = uidpassword.substring(idx+1);
+                String password = uidpassword.substring(idx + 1);
 
                 if (!authenticationIsRequired(username)) {
                     chain.doFilter(request, response);
@@ -77,8 +83,8 @@ public class BasicHeaderProcessor implements Filter {
                 for (BasicHeaderAuthenticator a : all()) {
                     LOGGER.log(FINER, "Attempting to authenticate with {0}", a);
                     Authentication auth = a.authenticate(req, rsp, username, password);
-                    if (auth!=null) {
-                        LOGGER.log(FINE, "Request authenticated as {0} by {1}", new Object[]{auth,a});
+                    if (auth != null) {
+                        LOGGER.log(FINE, "Request authenticated as {0} by {1}", new Object[]{auth, a});
                         success(req, rsp, chain, auth);
                         return;
                     }
