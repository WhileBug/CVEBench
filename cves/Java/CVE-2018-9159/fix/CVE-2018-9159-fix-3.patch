
diff --git a/src/main/java/spark/resource/ClassPathResource.java b/src/main/java/spark/resource/ClassPathResource.java
index dd8ba97..98338f0 100644
--- a/src/main/java/spark/resource/ClassPathResource.java
+++ b/src/main/java/spark/resource/ClassPathResource.java
@@ -87,7 +87,7 @@ public class ClassPathResource extends AbstractFileResolvingResource {
     }
 
     private static boolean doesNotContainFileColon(String path) {
-        return !path.contains("file:");
+        return !path.contains("file:") && !path.contains("../");
     }
 
     /**
diff --git a/src/test/java/spark/embeddedserver/jetty/EmbeddedJettyFactoryTest.java b/src/test/java/spark/embeddedserver/jetty/EmbeddedJettyFactoryTest.java
index bf57529..3a918a3 100644
--- a/src/test/java/spark/embeddedserver/jetty/EmbeddedJettyFactoryTest.java
+++ b/src/test/java/spark/embeddedserver/jetty/EmbeddedJettyFactoryTest.java
@@ -69,4 +69,28 @@ public class EmbeddedJettyFactoryTest {
     public void tearDown() throws Exception {
         if(embeddedServer != null) embeddedServer.extinguish();
     }
-}
+    @Test
+    public void testSecurityRestrictions() throws Exception {
+        final JettyServerFactory jettyServerFactory = mock(JettyServerFactory.class);
+        final StaticFilesConfiguration staticFilesConfiguration = mock(StaticFilesConfiguration.class);
+        final Routes routes = mock(Routes.class);
+
+        when(jettyServerFactory.create(anyInt(), anyInt(), anyInt())).thenReturn(new Server());
+
+        final EmbeddedJettyFactory embeddedJettyFactory = new EmbeddedJettyFactory(jettyServerFactory);
+        embeddedServer = embeddedJettyFactory.create(routes, staticFilesConfiguration, false);
+
+        try {
+            embeddedServer.ignite("localhost", 8080, "../etc/passwd", 100, 10, 10000);
+            fail("Should not allow directory traversal");
+        } catch (Exception e) {
+            assertThat(e.getMessage(), containsString("Security violation"));
+        }
+
+        try {
+            embeddedServer.ignite("localhost", 8080, "file:/etc/passwd", 100, 10, 10000);
+            fail("Should not allow file scheme");
+        } catch (Exception e) {
+            assertThat(e.getMessage(), containsString("Security violation"));
+        }
+    }
