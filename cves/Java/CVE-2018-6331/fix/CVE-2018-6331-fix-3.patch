
diff --git a/src/com/facebook/buck/cli/ParserCacheCommand.java b/src/com/facebook/buck/cli/ParserCacheCommand.java
index e448573761..7ea4edb28f 100644
--- a/src/com/facebook/buck/cli/ParserCacheCommand.java
+++ b/src/com/facebook/buck/cli/ParserCacheCommand.java
@@ -76,30 +76,17 @@ public class ParserCacheCommand extends AbstractCommand {
     if (saveFilename != null) {
       invalidateChanges(params);
       RemoteDaemonicParserState state = params.getParser().storeParserState(params.getCell());
-      try (FileOutputStream fos = new FileOutputStream(saveFilename);
-          ZipOutputStream zipos = new ZipOutputStream(fos)) {
-        zipos.putNextEntry(new ZipEntry("parser_data"));
-        try (ObjectOutputStream oos = new ObjectOutputStream(zipos)) {
-          oos.writeObject(state);
+        try (FileOutputStream fos = new FileOutputStream(saveFilename);
+             Writer writer = new BufferedWriter(new OutputStreamWriter(fos))) {
+            ObjectMappers.WRITER.writeValue(writer, state);
         }
       }
     } else if (loadFilename != null) {
-      try (FileInputStream fis = new FileInputStream(loadFilename);
-          ZipInputStream zipis = new ZipInputStream(fis)) {
-        ZipEntry entry = zipis.getNextEntry();
-        Preconditions.checkState(entry.getName().equals("parser_data"));
-        try (ObjectInputStream ois = new ObjectInputStream(zipis)) {
-          RemoteDaemonicParserState state;
-          try {
-            state = (RemoteDaemonicParserState) ois.readObject();
-          } catch (ClassNotFoundException e) {
-            params.getConsole().printErrorText("Invalid file format");
-            return ExitCode.COMMANDLINE_ERROR;
-          }
-          params.getParser().restoreParserState(state, params.getCell());
+        try (FileInputStream fis = new FileInputStream(loadFilename);
+             Reader reader = new BufferedReader(new InputStreamReader(fis))) {
+            RemoteDaemonicParserState state = ObjectMappers.READER.readValue(reader, RemoteDaemonicParserState.class);
+            params.getParser().restoreParserState(state, params.getCell());
         }
-      }
-      invalidateChanges(params);
 
       ParserConfig configView = params.getBuckConfig().getView(ParserConfig.class);
       if (configView.isParserCacheMutationWarningEnabled()) {
