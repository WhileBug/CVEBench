
diff --git a/http-netty/src/main/java/io/micronaut/http/netty/NettyHttpHeaders.java b/http-netty/src/main/java/io/micronaut/http/netty/NettyHttpHeaders.java
index 97956bef10..0597af1fc0 100644
--- a/http-netty/src/main/java/io/micronaut/http/netty/NettyHttpHeaders.java
+++ b/http-netty/src/main/java/io/micronaut/http/netty/NettyHttpHeaders.java
@@ -35,69 +35,26 @@ import java.util.Set;
  * @since 1.0
  */
 @Internal
-public class NettyHttpHeaders implements MutableHttpHeaders {
-
-    io.netty.handler.codec.http.HttpHeaders nettyHeaders;
-    final ConversionService<?> conversionService;
+    private boolean isValidHeader(String header) {
+        // Simple validation to check for common header injection patterns
+        return !header.contains("\n") && !header.contains("\r");
+    }
 
-    /**
-     * @param nettyHeaders      The Netty Http headers
-     * @param conversionService The conversion service
-     */
     public NettyHttpHeaders(io.netty.handler.codec.http.HttpHeaders nettyHeaders, ConversionService conversionService) {
         this.nettyHeaders = nettyHeaders;
         this.conversionService = conversionService;
+        if (!isValidHeader(nettyHeaders.toString())) {
+            throw new IllegalArgumentException("Invalid header value detected");
+        }
     }
 
-    /**
-     * Default constructor.
-     */
     public NettyHttpHeaders() {
         this.nettyHeaders = new DefaultHttpHeaders(false);
         this.conversionService = ConversionService.SHARED;
-    }
-
-    /**
-     * @return The underlying Netty headers.
-     */
-    public io.netty.handler.codec.http.HttpHeaders getNettyHeaders() {
-        return nettyHeaders;
-    }
-
-    /**
-     * Sets the underlying netty headers.
-     *
-     * @param headers The Netty http headers
-     */
-    void setNettyHeaders(io.netty.handler.codec.http.HttpHeaders headers) {
-        this.nettyHeaders = headers;
-    }
-
-    @Override
-    public <T> Optional<T> get(CharSequence name, ArgumentConversionContext<T> conversionContext) {
-        List<String> values = nettyHeaders.getAll(name);
-        if (values.size() > 0) {
-            if (values.size() == 1 || !isCollectionOrArray(conversionContext.getArgument().getType())) {
-                return conversionService.convert(values.get(0), conversionContext);
-            } else {
-                return conversionService.convert(values, conversionContext);
-            }
+        if (!isValidHeader(this.nettyHeaders.toString())) {
+            throw new IllegalArgumentException("Invalid header value detected");
         }
-        return Optional.empty();
-    }
-
-    private boolean isCollectionOrArray(Class<?> clazz) {
-        return clazz.isArray() || Collection.class.isAssignableFrom(clazz);
-    }
-
-    @Override
-    public List<String> getAll(CharSequence name) {
-        return nettyHeaders.getAll(name);
     }
-
-    @Override
-    public Set<String> names() {
-        return nettyHeaders.names();
     }
 
     @Override
