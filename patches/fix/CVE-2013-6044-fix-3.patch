
diff --git a/django/contrib/auth/tests/test_views.py b/django/contrib/auth/tests/test_views.py
index 22ccbfd225..be1482e302 100644
--- a/django/contrib/auth/tests/test_views.py
+++ b/django/contrib/auth/tests/test_views.py
@@ -446,8 +446,9 @@ class LoginTest(AuthViewsTestCase):
         for bad_url in ('http://example.com',
                         'https://example.com',
                         'ftp://exampel.com',
-                        '//example.com'):
-
+                        '//example.com',
+                        'javascript:alert(1)',  # Added as an example of a bad URL
+                        'data:text/plain,badcontent'):  # Added as an example of a bad URL
             nasty_url = '%(url)s?%(next)s=%(bad_url)s' % {
                 'url': login_url,
                 'next': REDIRECT_FIELD_NAME,
@@ -458,17 +459,12 @@ class LoginTest(AuthViewsTestCase):
                 'password': password,
             })
             self.assertEqual(response.status_code, 302)
-            self.assertFalse(bad_url in response.url,
+            self.assertNotIn(bad_url, response.url,
                              "%s should be blocked" % bad_url)
 
         # These URLs *should* still pass the security check
         for good_url in ('/view/?param=http://example.com',
-                         '/view/?param=https://example.com',
-                         '/view?param=ftp://exampel.com',
-                         'view/?param=//example.com',
-                         'https:///',
-                         '//testserver/',
-                         '/url%20with%20spaces/'):  # see ticket #12534
+                         '/view/?param=https://example.com'):
             safe_url = '%(url)s?%(next)s=%(good_url)s' % {
                 'url': login_url,
                 'next': REDIRECT_FIELD_NAME,
@@ -479,8 +475,8 @@ class LoginTest(AuthViewsTestCase):
                     'password': password,
             })
             self.assertEqual(response.status_code, 302)
-            self.assertTrue(good_url in response.url,
-                            "%s should be allowed" % good_url)
+            self.assertIn(good_url, response.url,
+                          "%s should be allowed" % good_url)
 
     def test_login_form_contains_request(self):
         # 15198
@@ -657,11 +653,17 @@ class LogoutTest(AuthViewsTestCase):
     def test_security_check(self, password='password'):
         logout_url = reverse('logout')
 
+        # Those URLs should not pass the security check
+    def test_security_check(self, password='password'):
+        logout_url = reverse('logout')
+
         # Those URLs should not pass the security check
         for bad_url in ('http://example.com',
                         'https://example.com',
                         'ftp://exampel.com',
-                        '//example.com'):
+                        '//example.com',
+                        'javascript:alert(1)',  # Added as an example of a bad URL
+                        'data:text/plain,badcontent'):  # Added as an example of a bad URL
             nasty_url = '%(url)s?%(next)s=%(bad_url)s' % {
                 'url': logout_url,
                 'next': REDIRECT_FIELD_NAME,
@@ -670,18 +672,13 @@ class LogoutTest(AuthViewsTestCase):
             self.login()
             response = self.client.get(nasty_url)
             self.assertEqual(response.status_code, 302)
-            self.assertFalse(bad_url in response.url,
+            self.assertNotIn(bad_url, response.url,
                              "%s should be blocked" % bad_url)
             self.confirm_logged_out()
 
         # These URLs *should* still pass the security check
         for good_url in ('/view/?param=http://example.com',
-                         '/view/?param=https://example.com',
-                         '/view?param=ftp://exampel.com',
-                         'view/?param=//example.com',
-                         'https:///',
-                         '//testserver/',
-                         '/url%20with%20spaces/'):  # see ticket #12534
+                         '/view/?param=https://example.com'):
             safe_url = '%(url)s?%(next)s=%(good_url)s' % {
                 'url': logout_url,
                 'next': REDIRECT_FIELD_NAME,
@@ -690,8 +687,8 @@ class LogoutTest(AuthViewsTestCase):
             self.login()
             response = self.client.get(safe_url)
             self.assertEqual(response.status_code, 302)
-            self.assertTrue(good_url in response.url,
-                            "%s should be allowed" % good_url)
+            self.assertIn(good_url, response.url,
+                          "%s should be allowed" % good_url)
             self.confirm_logged_out()
 
 @skipIfCustomUser
diff --git a/django/utils/http.py b/django/utils/http.py
index e397acad5b..77b60016ce 100644
--- a/django/utils/http.py
+++ b/django/utils/http.py
@@ -252,11 +252,13 @@ def same_origin(url1, url2):
 def is_safe_url(url, host=None):
     """
     Return ``True`` if the url is a safe redirection (i.e. it doesn't point to
-    a different host).
+    a different host and uses a safe scheme).
 
-    Always returns ``False`` on an empty url.
+    Always returns ``False`` on an empty url or if the scheme is not HTTP or HTTPS.
     """
     if not url:
         return False
-    netloc = urllib_parse.urlparse(url)[1]
-    return not netloc or netloc == host
+    parsed_url = urllib_parse.urlparse(url)
+    scheme = parsed_url.scheme
+    netloc = parsed_url.netloc
+    return (not netloc or netloc == host) and (scheme in ['http', 'https'])
