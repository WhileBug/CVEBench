
diff --git a/wagtail/contrib/forms/forms.py b/wagtail/contrib/forms/forms.py
index cbd9802806..6c353b44a9 100644
--- a/wagtail/contrib/forms/forms.py
+++ b/wagtail/contrib/forms/forms.py
@@ -111,10 +111,14 @@ class FormBuilder:
 
         return formfields
 
-    def get_field_options(self, field):
         options = {}
         options['label'] = field.label
-        options['help_text'] = field.help_text
+        from django.utils.html import escape
+        from django.conf import settings
+        if getattr(settings, 'WAGTAILFORMS_HELP_TEXT_ALLOW_HTML', False):
+            options['help_text'] = field.help_text
+        else:
+            options['help_text'] = escape(field.help_text)
         options['required'] = field.required
         options['initial'] = field.default_value
         return options
diff --git a/wagtail/contrib/forms/tests/test_models.py b/wagtail/contrib/forms/tests/test_models.py
index 08523130c9..c6a62ed3b9 100644
--- a/wagtail/contrib/forms/tests/test_models.py
+++ b/wagtail/contrib/forms/tests/test_models.py
@@ -662,4 +662,40 @@ class TestLegacyFormFieldCleanNameChecks(TestCase):
             field_type='number',
         )
 
-        self.assertEqual(field.clean_name, 'your_favourite_number')
+from django.test import TestCase, override_settings
+from django.utils.html import escape
+from wagtail.contrib.forms.models import AbstractFormField
+from wagtail.contrib.forms.tests.utils import make_form_page
+
+class TestHelpTextEscaping(TestCase):
+    def test_help_text_escaping(self):
+        # Create a form page with a field that has help text containing HTML
+        form_page = make_form_page()
+        form_field = AbstractFormField.objects.create(
+            page=form_page,
+            sort_order=1,
+            label='Test Field',
+            field_type='singleline',
+            help_text='<strong>Helpful</strong> text'
+        )
+
+        # Render the form and check that the help text is escaped
+        response = self.client.get(form_page.url)
+        self.assertNotContains(response, form_field.help_text)
+        self.assertContains(response, escape(form_field.help_text))
+
+    @override_settings(WAGTAILFORMS_HELP_TEXT_ALLOW_HTML=True)
+    def test_help_text_not_escaped_with_setting(self):
+        # Create a form page with a field that has help text containing HTML
+        form_page = make_form_page()
+        form_field = AbstractFormField.objects.create(
+            page=form_page,
+            sort_order=1,
+            label='Test Field',
+            field_type='singleline',
+            help_text='<strong>Helpful</strong> text'
+        )
+
+        # Render the form and check that the help text is not escaped
+        response = self.client.get(form_page.url)
+        self.assertContains(response, form_field.help_text)
