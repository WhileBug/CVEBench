
diff --git a/lib/ansible/plugins/connections/chroot.py b/lib/ansible/plugins/connections/chroot.py
index 3ecc0f7030..41f2892eb4 100644
--- a/lib/ansible/plugins/connections/chroot.py
+++ b/lib/ansible/plugins/connections/chroot.py
@@ -73,6 +73,11 @@ class Connection(object):
         if in_data:
             raise errors.AnsibleError("Internal Error: this module does not support optimized module pipelining")
 
+        # Resolve symlinks and ensure the command is within the chroot
+        resolved_cmd_path = os.path.realpath(os.path.join(self.chroot, cmd))
+        if not resolved_cmd_path.startswith(self.chroot):
+            raise errors.AnsibleError("Resolved command path is outside the chroot: %s" % resolved_cmd_path)
+
         # We enter chroot as root so we ignore privlege escalation?
 
         if executable:
@@ -81,7 +86,7 @@ class Connection(object):
             local_cmd = '%s "%s" %s' % (self.chroot_cmd, self.chroot, cmd)
 
         vvv("EXEC %s" % (local_cmd), host=self.chroot)
-        p = subprocess.Popen(local_cmd, shell=isinstance(local_cmd, basestring),
+        p = subprocess.Popen(local_cmd, shell=isinstance(local_cmd, str),
                              cwd=self.runner.basedir,
                              stdin=subprocess.PIPE,
                              stdout=subprocess.PIPE, stderr=subprocess.PIPE)
@@ -97,6 +102,11 @@ class Connection(object):
         normpath = os.path.normpath(out_path)
         out_path = os.path.join(self.chroot, normpath[1:])
 
+        # Resolve symlinks and ensure the out_path is within the chroot
+        resolved_out_path = os.path.realpath(out_path)
+        if not resolved_out_path.startswith(self.chroot):
+            raise errors.AnsibleError("Resolved output path is outside the chroot: %s" % resolved_out_path)
+
         vvv("PUT %s TO %s" % (in_path, out_path), host=self.chroot)
         if not os.path.exists(in_path):
             raise errors.AnsibleFileNotFound("file or module does not exist: %s" % in_path)
@@ -117,6 +127,11 @@ class Connection(object):
         normpath = os.path.normpath(in_path)
         in_path = os.path.join(self.chroot, normpath[1:])
 
+        # Resolve symlinks and ensure the in_path is within the chroot
+        resolved_in_path = os.path.realpath(in_path)
+        if not resolved_in_path.startswith(self.chroot):
+            raise errors.AnsibleError("Resolved input path is outside the chroot: %s" % resolved_in_path)
+
         vvv("FETCH %s TO %s" % (in_path, out_path), host=self.chroot)
         if not os.path.exists(in_path):
             raise errors.AnsibleFileNotFound("file or module does not exist: %s" % in_path)
