
diff --git a/django/utils/http.py b/django/utils/http.py
index 2dce7d3add..d04eca1c9a 100644
--- a/django/utils/http.py
+++ b/django/utils/http.py
@@ -282,7 +282,7 @@ def is_same_domain(host, pattern):
 def is_safe_url(url, host=None):
     """
     Return ``True`` if the url is a safe redirection (i.e. it doesn't point to
-    a different host and uses a safe scheme).
+    a different host, doesn't contain embedded credentials and uses a safe scheme).
 
     Always returns ``False`` on an empty url.
     """
@@ -308,5 +308,10 @@ def is_safe_url(url, host=None):
     # URL and might consider the URL as scheme relative.
     if unicodedata.category(url[0])[0] == 'C':
         return False
-    return ((not url_info.netloc or url_info.netloc == host) and
-            (not url_info.scheme or url_info.scheme in ['http', 'https']))
+    # Ensure the URL does not contain user credentials before the hostname.
+    if '@' in url_info.netloc:
+        return False
+    # Ensure the URL does not redirect to a different domain than intended.
+    if host and not is_same_domain(url_info.netloc, host):
+        return False
+    return (not url_info.scheme or url_info.scheme in ['http', 'https'])
diff --git a/test_is_safe_url.py b/test_is_safe_url.py
new file mode 100644
index 0000000000..e96b0e5699
--- /dev/null
+++ b/test_is_safe_url.py
@@ -0,0 +1,22 @@
+from django.utils.http import is_safe_url
+
+# Define a list of test cases with expected outcomes
+test_cases = [
+    ("http://example.com", True),
+    ("https://example.com", True),
+    ("http://example.com/some/path", True),
+    ("ftp://example.com", False),  # Unsafe scheme
+    ("javascript:alert(1)", False),  # Unsafe scheme
+    ("http://example.com@attacker.com", False),  # Embedded credentials
+    ("http://attacker.com", False),  # Different domain
+    ("///example.com", False),  # Starts with three slashes
+    ("", False),  # Empty URL
+    ("http:///example.com", False),  # Scheme without hostname
+]
+
+# Run the test cases
+for url, expected in test_cases:
+    result = is_safe_url(url, host="example.com")
+    assert result == expected, f"URL: {url}, Expected: {expected}, Got: {result}"
+
+print("All tests passed successfully.")
