
diff --git a/salt/utils/odict.py b/salt/utils/odict.py
index 7838256232..b36ada7047 100644
--- a/salt/utils/odict.py
+++ b/salt/utils/odict.py
@@ -22,7 +22,7 @@
 
 # Import python libs
 from __future__ import absolute_import
-from collections import Callable
+from collections.abc import Callable
 
 # Import 3rd-party libs
 import salt.ext.six as six
diff --git a/salt/utils/verify.py b/salt/utils/verify.py
index 6e69283f07..51dbf8a89d 100644
--- a/salt/utils/verify.py
+++ b/salt/utils/verify.py
@@ -482,10 +482,22 @@ def clean_path(root, path, subdir=False):
 
 def clean_id(id_):
     '''
-    Returns if the passed id is clean.
+    Returns if the passed id is clean by checking for directory traversal patterns.
     '''
-    if re.search(r'\.\.\{sep}'.format(sep=os.sep), id_):
+    # Reject absolute paths and paths with traversal patterns
+    if os.path.isabs(id_) or '..' in id_:
         return False
+    traversal_patterns = [
+        r'\.\./',  # Unix parent directory
+        r'\.\.\\',  # Windows parent directory
+        r'/\.\./',  # Unix parent directory embedded in path
+        r'\\\.\.\\',  # Windows parent directory embedded in path
+        r'/\.\.$',  # Unix parent directory at the end of path
+        r'\\\.\.$',  # Windows parent directory at the end of path
+    ]
+    for pattern in traversal_patterns:
+        if re.search(pattern, id_):
+            return False
     return True
 
 
diff --git a/test_verify.py b/test_verify.py
new file mode 100644
index 0000000000..54e5f69f4b
--- /dev/null
+++ b/test_verify.py
@@ -0,0 +1,28 @@
+import os
+from salt.utils.verify import clean_id
+
+# Test cases for minion IDs
+test_cases = [
+    ("valid-minion", True),
+    ("../etc/passwd", False),
+    ("..\\windows\\system32", False),
+    ("..", False),
+    ("/var/cache/salt", False),
+    ("..//var//cache//salt", False),
+    ("..\\..\\etc\\salt", False),
+    ("valid..minion", False),
+    ("valid/minion", True),
+    ("valid\\minion", True),
+]
+
+# Function to run the test cases
+def run_tests():
+    for minion_id, expected in test_cases:
+        result = clean_id(minion_id)
+        assert result == expected, f"Test failed for minion ID: {minion_id}"
+
+# Run the tests
+if __name__ == "__main__":
+    run_tests()
+    print("All tests passed successfully.")
+
