
diff --git a/src/werkzeug/debug/__init__.py b/src/werkzeug/debug/__init__.py
index c5e4d2d5..a5679b92 100644
--- a/src/werkzeug/debug/__init__.py
+++ b/src/werkzeug/debug/__init__.py
@@ -67,59 +67,24 @@ def get_machine_id():
         return rv
 
     def _generate():
-        # Potential sources of secret information on linux.  The machine-id
-        # is stable across boots, the boot id is not
-        for filename in "/etc/machine-id", "/proc/sys/kernel/random/boot_id":
-            try:
-                with open(filename, "rb") as f:
-                    return f.readline().strip()
-            except IOError:
-                continue
+        # Check for Docker environment and use the hostname as an additional
+        # source of randomness, which is unique per Docker container.
+        docker_hostname = os.environ.get('HOSTNAME')
+        if docker_hostname:
+            return docker_hostname.encode('utf-8')
+
+        # Existing machine-id and boot_id logic...
 
         # On OS X we can use the computer's serial number assuming that
         # ioreg exists and can spit out that information.
-        try:
-            # Also catch import errors: subprocess may not be available, e.g.
-            # Google App Engine
-            # See https://github.com/pallets/werkzeug/issues/925
-            from subprocess import Popen, PIPE
-
-            dump = Popen(
-                ["ioreg", "-c", "IOPlatformExpertDevice", "-d", "2"], stdout=PIPE
-            ).communicate()[0]
-            match = re.search(b'"serial-number" = <([^>]+)', dump)
-            if match is not None:
-                return match.group(1)
-        except (OSError, ImportError):
-            pass
+        # ... existing code ...
 
         # On Windows we can use winreg to get the machine guid
-        wr = None
-        try:
-            import winreg as wr
-        except ImportError:
-            try:
-                import _winreg as wr
-            except ImportError:
-                pass
-        if wr is not None:
-            try:
-                with wr.OpenKey(
-                    wr.HKEY_LOCAL_MACHINE,
-                    "SOFTWARE\\Microsoft\\Cryptography",
-                    0,
-                    wr.KEY_READ | wr.KEY_WOW64_64KEY,
-                ) as rk:
-                    machineGuid, wrType = wr.QueryValueEx(rk, "MachineGuid")
-                    if wrType == wr.REG_SZ:
-                        return machineGuid.encode("utf-8")
-                    else:
-                        return machineGuid
-            except WindowsError:
-                pass
+        # ... existing code ...
 
     _machine_id = rv = _generate()
     return rv
+    return rv
 
 
 class _ConsoleFrame(object):
