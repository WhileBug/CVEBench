
diff --git a/django/http/__init__.py b/django/http/__init__.py
index ecb39129ad..a1d24cc6c6 100644
--- a/django/http/__init__.py
+++ b/django/http/__init__.py
@@ -167,7 +167,7 @@ class HttpRequest(object):
         return build_request_repr(self)
 
     def get_host(self):
-        """Returns the HTTP host using the environment or request headers."""
+        """Returns the HTTP host using the environment or request headers, with added validation."""
         # We try three options, in order of decreasing preference.
         if settings.USE_X_FORWARDED_HOST and (
             'HTTP_X_FORWARDED_HOST' in self.META):
@@ -180,6 +180,11 @@ class HttpRequest(object):
             server_port = str(self.META['SERVER_PORT'])
             if server_port != ('443' if self.is_secure() else '80'):
                 host = '%s:%s' % (host, server_port)
+        
+        # Validate the host: it should not contain newlines or carriage returns
+        if '\n' in host or '\r' in host:
+            raise SuspiciousOperation("Invalid HTTP Host header (you may need to escape newlines and carriage returns).")
+        
         return host
 
     def get_full_path(self):
diff --git a/test_validation.py b/test_validation.py
new file mode 100644
index 0000000000..27cd0d9088
--- /dev/null
+++ b/test_validation.py
@@ -0,0 +1,18 @@
+import os
+from django.conf import settings
+from django.http import HttpRequest
+from django.core.exceptions import SuspiciousOperation
+
+# Configure Django settings
+settings.configure(USE_X_FORWARDED_HOST=False)
+
+# Simulate a request with a poisoned Host header
+request = HttpRequest()
+request.META['HTTP_HOST'] = "example.com\nInjected-Header: value"
+
+try:
+    host = request.get_host()
+    print("Host header accepted:", host)
+except SuspiciousOperation as e:
+    print("SuspiciousOperation raised:", str(e))
+
