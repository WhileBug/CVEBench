
diff --git a/scrapy/downloadermiddlewares/redirect.py b/scrapy/downloadermiddlewares/redirect.py
index 4053fecc5..7bc6f7ea3 100644
--- a/scrapy/downloadermiddlewares/redirect.py
+++ b/scrapy/downloadermiddlewares/redirect.py
@@ -78,6 +78,13 @@ class RedirectMiddleware(BaseRedirectMiddleware):
             location = request_scheme + '://' + location.lstrip('/')
 
         redirected_url = urljoin(request.url, location)
+        redirected_domain = urlparse(redirected_url).netloc
+        original_domain = urlparse(request.url).netloc
+
+        if redirected_domain != original_domain:
+            sensitive_headers = ['Cookie', 'Authorization']
+            for header in sensitive_headers:
+                request.headers.pop(header, None)
 
         if response.status in (301, 307, 308) or request.method == 'HEAD':
             redirected = request.replace(url=redirected_url)
diff --git a/test_security.py b/test_security.py
new file mode 100644
index 000000000..43b5b11d1
--- /dev/null
+++ b/test_security.py
@@ -0,0 +1,31 @@
+import pytest
+from scrapy.http import Request, Response
+from scrapy.spiders import Spider
+from scrapy.downloadermiddlewares.redirect import RedirectMiddleware
+
+class TestRedirectMiddleware:
+
+    @pytest.fixture
+    def spider(self):
+        return Spider('foo')
+
+    @pytest.fixture
+    def rmw(self):
+        class Settings:
+            REDIRECT_ENABLED = True
+            REDIRECT_MAX_TIMES = 20
+            REDIRECT_PRIORITY_ADJUST = 0
+
+        return RedirectMiddleware(Settings())
+
+    def test_sensitive_headers_removed_on_redirect_to_different_domain(self, rmw, spider):
+        # Original request to example.com with sensitive headers
+        req = Request('http://example.com', headers={'Cookie': 'foo=bar', 'Authorization': 'Basic abc123'})
+        # Response with a 302 redirect to a different domain
+        resp = Response('http://example.com', status=302, headers={'Location': 'http://different.com'})
+        # Process the response through the middleware
+        result = rmw.process_response(req, resp, spider)
+        # Ensure the sensitive headers are not present in the redirected request
+        assert 'Cookie' not in result.headers
+        assert 'Authorization' not in result.headers
+
