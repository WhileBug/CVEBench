
diff --git a/django/contrib/admin/widgets.py b/django/contrib/admin/widgets.py
index c4b15cdd6a..5b233e7eae 100644
--- a/django/contrib/admin/widgets.py
+++ b/django/contrib/admin/widgets.py
@@ -304,7 +304,7 @@ class AdminURLFieldWidget(forms.URLInput):
     def render(self, name, value, attrs=None):
         html = super(AdminURLFieldWidget, self).render(name, value, attrs)
         if value:
-            value = force_text(self._format_value(value))
+            value = escape(force_text(self._format_value(value)))
             final_attrs = {'href': mark_safe(smart_urlquote(value))}
             html = format_html(
                 '<p class="url">{0} <a {1}>{2}</a><br />{3} {4}</p>',
diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py
index 5a88df1e57..89f8e78aa6 100644
--- a/tests/admin_widgets/tests.py
+++ b/tests/admin_widgets/tests.py
@@ -922,4 +922,13 @@ class AdminRawIdWidgetSeleniumChromeTests(AdminRawIdWidgetSeleniumFirefoxTests):
     webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'
 
 class AdminRawIdWidgetSeleniumIETests(AdminRawIdWidgetSeleniumFirefoxTests):
-    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'
+    def testAdminURLFieldWidgetXSS(self):
+        """
+        Ensure that the AdminURLFieldWidget escapes potentially dangerous input to prevent XSS.
+        """
+        widget = widgets.AdminURLFieldWidget()
+        dangerous_input = '<script>alert("XSS")</script>'
+        escaped_input = conditional_escape(dangerous_input)
+        rendered = widget.render('test', dangerous_input, attrs={'id': 'id_test'})
+        self.assertIn(escaped_input, rendered)
+        self.assertNotIn(dangerous_input, rendered)
