Now, there is a CVE in this repo:{cve_description}.
{cve_changes_description}.

I have fixed the CVE somehow, but I need a unit test script to determine whether my fix is successful.
The unit test scripts should follow the logic of the CVE. If running the scripts can still exploit the CVE, the unit test fails; otherwise, it passes.

Now, please write a unit test script with the path as with the unit test script path as {unit_test_filename}.
To be noted, if the unit test passes, "print('The ACI unit test is passed!!!')", otherwise "print('The ACI unit test is failed!!!')".

The logic of the unit test script should follow that of the CVE exploit. You should know all the codes to realize the CVE exploit. That means I can directly run your script to judge whether the CVE can be exploited without modifying or adding code. You can add any files, like images or documents, that play as the payload in the CVE exploitation.

Furthermore, please write a shell script so I can use the shell script to auto-deploy the environment for the repo and to run the unit test script as "python {unit_test_filename}". And name the shell script as {shell_filename}.
Before you write the shell script, please carefully review the repo's ReadMe about how to install and deploy the repo. You should notice the Python version the repo uses.
Your shell scripts are executed in the repo dir directly, so you do not need to cd into it.

Some additional attention:
- Do not leave a placeholder for the unit test, but realize the code!!!
- Complete the whole unit test process, and do not leave any code like "pass" in Python to let me fill in. You should realize all the unit test logic.
- Your unit test scripts should include all the unit test files, unit test payload